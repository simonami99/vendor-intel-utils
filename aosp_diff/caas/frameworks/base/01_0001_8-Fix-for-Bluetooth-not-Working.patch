From 579276ffca0e02a555bbf08ddb182dd4cd928663 Mon Sep 17 00:00:00 2001
From: rnaidu <ramya.v.naidu@intel.com>
Date: Mon, 11 May 2020 15:42:19 +0530
Subject: [PATCH] Fix for Bluetooth not Working

Issue 1: Bluetooth is always in OFF after flashing but works
after reboot.
Issue 2:  Bluetooth is Turning OFF immediately once we do
Bluetooth device search

Fix: Add a blacklist of vendorid and productid to hide the
usb device.
Hide the dedicated BT usb device to avoid apps reading it.

Change-Id: I88bf0b886b1a7e6ac0f74e36164a1e3e512648c2
Tracked-On: https://jira.devtools.intel.com/browse/OAM-84029
Signed-off-by: Gaganpreet kaur <gaganpreetx.kaur@intel.com>
---
 core/res/res/values/config.xml                |  6 ++
 core/res/res/values/symbols.xml               |  1 +
 .../android/server/usb/UsbHostManager.java    | 72 +++++++++++++++----
 3 files changed, 67 insertions(+), 12 deletions(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 8331a57a341..81fbf6ab2ba 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -1214,6 +1214,12 @@
     <string-array name="config_usbHostBlacklist" translatable="false">
     </string-array>
 
+    <!-- List of restricted usb devices to exclude. Items should be added in the format
+          vendorId:produtId.
+    -->
+    <string-array name="config_usbDeviceBlacklist" translatable="false">
+    </string-array>
+
     <!-- List of paths to serial ports that are available to the serial manager.
          for example, /dev/ttyUSB0
     -->
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index aff7f611f33..88f71ab9fd0 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -3841,6 +3841,7 @@
   <java-symbol type="string" name="config_defaultSupervisionProfileOwnerComponent" />
   <java-symbol type="bool" name="config_inflateSignalStrength" />
   <java-symbol type="array" name="config_restrictedPreinstalledCarrierApps" />
+  <java-symbol type="array" name="config_usbDeviceBlacklist" />
 
   <java-symbol type="array" name="config_highRefreshRateBlacklist" />
 
diff --git a/services/usb/java/com/android/server/usb/UsbHostManager.java b/services/usb/java/com/android/server/usb/UsbHostManager.java
index 81223748906..bfcffd8a010 100644
--- a/services/usb/java/com/android/server/usb/UsbHostManager.java
+++ b/services/usb/java/com/android/server/usb/UsbHostManager.java
@@ -64,6 +64,9 @@ public class UsbHostManager {
     // USB busses to exclude from USB host support
     private final String[] mHostBlacklist;
 
+    // USB devices to exclude
+    private final String[] mDeviceBlacklist;
+
     private final UsbAlsaManager mUsbAlsaManager;
     private final UsbSettingsManager mSettingsManager;
 
@@ -228,6 +231,22 @@ public class UsbHostManager {
         }
     }
 
+    private static class VendorIdProductId {
+        public int vendorId;
+        public int productId;
+
+        public VendorIdProductId(int vendorId, int productId) {
+            vendorId = vendorId;
+            productId = productId;
+        }
+    }
+    //TODO: move the ids to the config of platform
+    private VendorIdProductId[] mVidPidBlackList = {
+        new VendorIdProductId(0x8087, 0x0a2b),
+        new VendorIdProductId(0x8087, 0x0aa7), //dedicated for BT in Celadon
+    };
+
+
     /*
      * UsbHostManager
      */
@@ -237,6 +256,8 @@ public class UsbHostManager {
 
         mHostBlacklist = context.getResources().getStringArray(
                 com.android.internal.R.array.config_usbHostBlacklist);
+        mDeviceBlacklist = context.getResources().getStringArray(
+                com.android.internal.R.array.config_usbDeviceBlacklist);
         mUsbAlsaManager = alsaManager;
         mSettingsManager = settingsManager;
         String deviceConnectionHandler = context.getResources().getString(
@@ -282,14 +303,23 @@ public class UsbHostManager {
     }
 
     /* returns true if the USB device should not be accessible by applications */
-    private boolean isBlackListed(int clazz, int subClass) {
+    private boolean isBlackListed(int clazz, int subClass, int vendorId, int productId) {
         // blacklist hubs
         if (clazz == UsbConstants.USB_CLASS_HUB) return true;
 
         // blacklist HID boot devices (mouse and keyboard)
-        return clazz == UsbConstants.USB_CLASS_HID
-                && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT;
-
+        if (clazz == UsbConstants.USB_CLASS_HID
+                && subClass == UsbConstants.USB_INTERFACE_SUBCLASS_BOOT) {
+            return true;
+        }
+        int count = mDeviceBlacklist.length;
+        String vid_pid = String.format("%04x:%04x", vendorId, productId);
+        for (int i = 0; i < count; i++) {
+            if (vid_pid.equals(mDeviceBlacklist[i])) {
+                return true;
+            }
+        }
+        return false;
     }
 
     private void addConnectionRecord(String deviceAddress, int mode, byte[] rawDescriptors) {
@@ -351,6 +381,8 @@ public class UsbHostManager {
     @SuppressWarnings("unused")
     private boolean usbDeviceAdded(String deviceAddress, int deviceClass, int deviceSubclass,
             byte[] descriptors) {
+        int vendorId = 0;
+        int productId = 0;
         if (DEBUG) {
             Slog.d(TAG, "usbDeviceAdded(" + deviceAddress + ") - start");
         }
@@ -362,19 +394,25 @@ public class UsbHostManager {
             return false;
         }
 
-        if (isBlackListed(deviceClass, deviceSubclass)) {
-            if (DEBUG) {
-                Slog.d(TAG, "device class is black listed");
-            }
-            return false;
-        }
-
         UsbDescriptorParser parser = new UsbDescriptorParser(deviceAddress, descriptors);
         if (deviceClass == UsbConstants.USB_CLASS_PER_INTERFACE
                 && !checkUsbInterfacesBlackListed(parser)) {
             return false;
         }
 
+        UsbDeviceDescriptor deviceDescriptor = parser.getDeviceDescriptor();
+        if (deviceDescriptor != null) {
+            vendorId  = deviceDescriptor.getVendorID();
+            productId = deviceDescriptor.getProductID();
+        }
+
+        if (isBlackListed(deviceClass, deviceSubclass, vendorId, productId)) {
+            if (DEBUG) {
+                Slog.d(TAG, "device class is black listed");
+            }
+            return false;
+        }
+
         // Potentially can block as it may read data from the USB device.
         logUsbDevice(parser);
 
@@ -555,12 +593,22 @@ public class UsbHostManager {
         // Device class needs to be obtained through the device interface.  Ignore device only
         // if ALL interfaces are black-listed.
         boolean shouldIgnoreDevice = false;
+        int vendorId = 0;
+        int productId = 0;
         for (UsbDescriptor descriptor: parser.getDescriptors()) {
             if (!(descriptor instanceof UsbInterfaceDescriptor)) {
                 continue;
             }
+
+            UsbDeviceDescriptor deviceDescriptor = parser.getDeviceDescriptor();
+            if (deviceDescriptor != null) {
+                vendorId  = deviceDescriptor.getVendorID();
+                productId = deviceDescriptor.getProductID();
+            }
+
             UsbInterfaceDescriptor iface = (UsbInterfaceDescriptor) descriptor;
-            shouldIgnoreDevice = isBlackListed(iface.getUsbClass(), iface.getUsbSubclass());
+            shouldIgnoreDevice = isBlackListed(iface.getUsbClass(), iface.getUsbSubclass(),
+                                                vendorId, productId);
             if (!shouldIgnoreDevice) {
                 break;
             }
-- 
2.17.1

