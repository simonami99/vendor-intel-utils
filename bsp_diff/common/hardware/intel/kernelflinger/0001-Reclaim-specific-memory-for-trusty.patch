From 8928e82de9a1995358e42819fab131d3ecd31775 Mon Sep 17 00:00:00 2001
From: Meng Xianglin <xianglinx.meng@intel.com>
Date: Thu, 22 Aug 2019 14:00:11 +0800
Subject: [PATCH] Reclaim specific memory for trusty

To load and run Tos image, some specific range of memory
should be allocated by kernelflinger. When kernelflinger
is chain loaded by other bootloader, these range of memory
might has been allocated by the former bootloader for
other purpose, reclaim it.

Change-Id: I8af8301b634acd1062cf52d709cabafdf4863a8b
Tracked-On: OAM-83885
Signed-off-by: Meng Xianglin <xianglinx.meng@intel.com>
---
 libkernelflinger/trusty_efi.c | 37 +++++++++++++++++++++++++++++++++--
 1 file changed, 35 insertions(+), 2 deletions(-)

diff --git a/libkernelflinger/trusty_efi.c b/libkernelflinger/trusty_efi.c
index 48632c0..52caf8b 100644
--- a/libkernelflinger/trusty_efi.c
+++ b/libkernelflinger/trusty_efi.c
@@ -190,7 +190,23 @@ static EFI_STATUS get_address_size_vmm(OUT UINT64 *vmm_mem_base, OUT UINT32 *vmm
                              vmm_mem_base);
         if (EFI_ERROR(ret)) {
                 efi_perror(ret, L"Alloc memory for VMM base addess failed");
-                return EFI_OUT_OF_RESOURCES;
+		/* if kernelflinger is chain loaded by other bootloader such as
+		 * grub, this range of memory might has been allocated, try to
+		 * reclaim it for trusty
+		 */
+		*vmm_mem_base = VMM_MEM_BASE;
+		ret = free_pages(VMM_MEM_BASE, EFI_SIZE_TO_PAGES(VMM_MEM_SIZE));
+		if (EFI_ERROR(ret)) {
+			efi_perror(ret, L"Free memory for VMM failed");
+			return EFI_OUT_OF_RESOURCES;
+		}
+
+		ret = allocate_pages(AllocateAddress,
+				     EfiRuntimeServicesData,
+				     EFI_SIZE_TO_PAGES(VMM_MEM_SIZE),
+				     vmm_mem_base);
+		if (EFI_ERROR(ret))
+			return EFI_OUT_OF_RESOURCES;
         }
         return EFI_SUCCESS;
 }
@@ -213,7 +229,24 @@ static EFI_STATUS get_address_size_trusty(OUT UINT64 *trusty_mem_base, OUT UINT3
                              trusty_mem_base);
         if (EFI_ERROR(ret)) {
                 efi_perror(ret, L"Alloc memory for Trusty base addess failed");
-                return EFI_OUT_OF_RESOURCES;
+		/* if kernelflinger is chain loaded by other bootloader such as
+		 * grub, this range of memory might has been allocated, try to
+		 * reclaim it for trusty
+		 */
+		*trusty_mem_base = TRUSTY_MEM_BASE;
+		ret = free_pages(TRUSTY_MEM_BASE, EFI_SIZE_TO_PAGES(TRUSTY_MEM_SIZE));
+		if (EFI_ERROR(ret)) {
+			efi_perror(ret, L"Free memory for Trusty failed");
+			return EFI_OUT_OF_RESOURCES;
+		}
+
+		ret = allocate_pages(AllocateAddress,
+				     EfiRuntimeServicesData,
+				     EFI_SIZE_TO_PAGES(TRUSTY_MEM_SIZE),
+				     trusty_mem_base);
+		if (EFI_ERROR(ret))
+			return EFI_OUT_OF_RESOURCES;
+
         }
         return EFI_SUCCESS;
 }
-- 
2.20.1

