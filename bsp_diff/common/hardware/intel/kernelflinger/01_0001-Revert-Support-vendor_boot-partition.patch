From 5a3f952f1038adb3d6de6ab1ec2491280620ed0f Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Thu, 11 Feb 2021 03:45:21 +0530
Subject: [PATCH] Revert "Support vendor_boot partition"

This reverts commit 68485596d98c23fde6b92c9b215b9d3a925d7ae0.
---
 include/android.h          | 115 ----------------------------
 installer.c                |   2 +-
 kernelflinger.c            |  52 ++-----------
 libkernelflinger/android.c | 151 +++++++++++--------------------------
 4 files changed, 49 insertions(+), 271 deletions(-)

diff --git a/include/android.h b/include/android.h
index 04a92fb..100c586 100644
--- a/include/android.h
+++ b/include/android.h
@@ -107,120 +107,6 @@ struct boot_img_hdr
 */
 
 
-#define VENDOR_BOOT_MAGIC "VNDRBOOT"
-#define VENDOR_BOOT_MAGIC_SIZE 8
-#define VENDOR_BOOT_ARGS_SIZE 2048
-#define VENDOR_BOOT_NAME_SIZE 16
-
-#define BOOT_IMG_HEADER_SIZE_V3 4096
-#define BOOT_HEADER_V3          3
-
-/* When the boot image header has a version of 3, the structure of the boot
- * image is as follows:
- *
- * +---------------------+
- * | boot header         | 4096 bytes
- * +---------------------+
- * | kernel              | m pages
- * +---------------------+
- * | ramdisk             | n pages
- * +---------------------+
- *
- * m = (kernel_size + 4096 - 1) / 4096
- * n = (ramdisk_size + 4096 - 1) / 4096
- *
- * Note that in version 3 of the boot image header, page size is fixed at 4096 bytes.
- *
- * The structure of the vendor boot image (introduced with version 3 and
- * required to be present when a v3 boot image is used) is as follows:
- *
- * +---------------------+
- * | vendor boot header  | o pages
- * +---------------------+
- * | vendor ramdisk      | p pages
- * +---------------------+
- * | dtb                 | q pages
- * +---------------------+
-
- * o = (2112 + page_size - 1) / page_size
- * p = (vendor_ramdisk_size + page_size - 1) / page_size
- * q = (dtb_size + page_size - 1) / page_size
- *
- * 0. all entities in the boot image are 4096-byte aligned in flash, all
- *    entities in the vendor boot image are page_size (determined by the vendor
- *    and specified in the vendor boot image header) aligned in flash
- * 1. kernel, ramdisk, vendor ramdisk, and DTB are required (size != 0)
- * 2. load the kernel and DTB at the specified physical address (kernel_addr,
- *    dtb_addr)
- * 3. load the vendor ramdisk at ramdisk_addr
- * 4. load the generic ramdisk immediately following the vendor ramdisk in
- *    memory
- * 5. set up registers for kernel entry as required by your architecture
- * 6. if the platform has a second stage bootloader jump to it (must be
- *    contained outside boot and vendor boot partitions), otherwise
- *    jump to kernel_addr
- */
-struct boot_img_hdr_v3 {
-    // Must be BOOT_MAGIC.
-    uint8_t magic[BOOT_MAGIC_SIZE];
-
-    uint32_t kernel_size; /* size in bytes */
-    uint32_t ramdisk_size; /* size in bytes */
-
-    // Operating system version and security patch level.
-    // For version "A.B.C" and patch level "Y-M-D":
-    //   (7 bits for each of A, B, C; 7 bits for (Y-2000), 4 bits for M)
-    //   os_version = A[31:25] B[24:18] C[17:11] (Y-2000)[10:4] M[3:0]
-    uint32_t os_version;
-
-#if __cplusplus
-    void SetOsVersion(unsigned major, unsigned minor, unsigned patch) {
-        os_version &= ((1 << 11) - 1);
-        os_version |= (((major & 0x7f) << 25) | ((minor & 0x7f) << 18) | ((patch & 0x7f) << 11));
-    }
-
-    void SetOsPatchLevel(unsigned year, unsigned month) {
-        os_version &= ~((1 << 11) - 1);
-        os_version |= (((year - 2000) & 0x7f) << 4) | ((month & 0xf) << 0);
-    }
-#endif
-
-    uint32_t header_size;
-
-    uint32_t reserved[4];
-
-    // Version of the boot image header.
-    uint32_t header_version;
-
-    uint8_t cmdline[BOOT_ARGS_SIZE + BOOT_EXTRA_ARGS_SIZE];
-} __attribute__((packed));
-
-struct vendor_boot_img_hdr_v3 {
-    // Must be VENDOR_BOOT_MAGIC.
-    uint8_t magic[VENDOR_BOOT_MAGIC_SIZE];
-
-    // Version of the vendor boot image header.
-    uint32_t header_version;
-
-    uint32_t page_size; /* flash page size we assume */
-
-    uint32_t kernel_addr; /* physical load addr */
-    uint32_t ramdisk_addr; /* physical load addr */
-
-    uint32_t vendor_ramdisk_size; /* size in bytes */
-
-    uint8_t cmdline[VENDOR_BOOT_ARGS_SIZE];
-
-    uint32_t tags_addr; /* physical addr for kernel tags (if required) */
-    uint8_t name[VENDOR_BOOT_NAME_SIZE]; /* asciiz product name */
-
-    uint32_t header_size;
-
-    uint32_t dtb_size; /* size in bytes for DTB image */
-    uint64_t dtb_addr; /* physical load address for DTB image */
-} __attribute__((packed));
-
-
 /* Bootloader Message (2-KiB)
  *
  * This structure describes the content of a block in flash
@@ -323,7 +209,6 @@ _Static_assert(sizeof(struct bootloader_control) ==
 EFI_STATUS android_image_start_buffer(
                 IN EFI_HANDLE parent_image,
                 IN VOID *bootimage,
-                IN VOID *vendorbootimage,
                 IN enum boot_target boot_target,
                 IN UINT8 boot_state,
                 IN EFI_GUID *swap,
diff --git a/installer.c b/installer.c
index 5dc8fe8..882941f 100644
--- a/installer.c
+++ b/installer.c
@@ -801,7 +801,7 @@ static void installer_boot(INTN argc, CHAR8 **argv)
 		return;
 	}
 
-	ret = android_image_start_buffer(g_parent_image, bootimage, NULL,
+	ret = android_image_start_buffer(g_parent_image, bootimage,
 					NORMAL_BOOT, BOOT_STATE_ORANGE, NULL,
 					NULL, NULL);
 	if (EFI_ERROR(ret))
diff --git a/kernelflinger.c b/kernelflinger.c
index 8e641c2..29bf9e5 100644
--- a/kernelflinger.c
+++ b/kernelflinger.c
@@ -799,46 +799,6 @@ static EFI_STATUS avb_load_verify_boot_image(
 	return ret;
 }
 
-
-/* Use AVB load and verify vendor_boot image into RAM.
- *
- * boot_target  - Boot image to load. Values supported are NORMAL_BOOT, RECOVERY,
- *                and ESP_BOOTIMAGE (for 'fastboot boot')
- * bootimage    - Returned allocated pointer value for the loaded vendor_boot image.
- *
- * Return values:
- * EFI_INVALID_PARAMETER - Unsupported boot target type, key is not well-formed,
- *                         or loaded boot image was missing or corrupt
- * EFI_ACCESS_DENIED     - Validation failed against OEM or embedded certificate,
- *                         boot image still usable
- */
-static EFI_STATUS avb_load_verify_vendor_boot_image(
-		IN enum boot_target boot_target,
-		OUT VOID **bootimage)
-{
-	EFI_STATUS ret;
-	UINT8 boot_state;
-	AvbSlotVerifyData *slot_data;
-
-	switch (boot_target) {
-	case NORMAL_BOOT:
-	case CHARGER:
-	case RECOVERY:
-		ret = android_image_load_partition_avb_ab("vendor_boot", bootimage, &boot_state, &slot_data);
-		break;
-	default:
-		*bootimage = NULL;
-		return EFI_INVALID_PARAMETER;
-	}
-
-	if (!EFI_ERROR(ret))
-		debug(L"vendor_boot image loaded");
-
-	return ret;
-}
-
-
-
 #define OEMVARS_MAGIC           "#OEMVARS\n"
 #define OEMVARS_MAGIC_SZ        9
 
@@ -886,7 +846,7 @@ static EFI_STATUS set_image_oemvars(VOID *bootimage)
 	return set_image_oemvars_nocheck(bootimage, NULL);
 }
 
-static EFI_STATUS load_image(VOID *bootimage, VOID *vendorbootimage, UINT8 boot_state,
+static EFI_STATUS load_image(VOID *bootimage, UINT8 boot_state,
 				enum boot_target boot_target,
 				VBDATA *vb_data
 				)
@@ -963,7 +923,7 @@ static EFI_STATUS load_image(VOID *bootimage, VOID *vendorbootimage, UINT8 boot_
 
 	debug(L"chainloading boot image, boot state is %s",
 			boot_state_to_string(boot_state));
-	ret = android_image_start_buffer(g_parent_image, bootimage, vendorbootimage,
+	ret = android_image_start_buffer(g_parent_image, bootimage,
 					boot_target, boot_state, NULL,
 					vb_data,
 					NULL);
@@ -1058,7 +1018,7 @@ static VOID enter_fastboot_mode(UINT8 boot_state)
                                 if (EFI_ERROR(ret))
                                         efi_perror(ret, L"Fastboot mode fail to load slot data");
 				set_image_oemvars_nocheck(bootimage, NULL);
-				load_image(bootimage, NULL, BOOT_STATE_ORANGE, NORMAL_BOOT, slot_data);
+				load_image(bootimage, BOOT_STATE_ORANGE, NORMAL_BOOT, slot_data);
 			}
 			FreePool(bootimage);
 			bootimage = NULL;
@@ -1169,7 +1129,6 @@ EFI_STATUS efi_main(EFI_HANDLE image, EFI_SYSTEM_TABLE *sys_table)
 {
 	EFI_STATUS ret;
 	CHAR16 *target_path = NULL;
-	VOID *vendorbootimage = NULL;
 	VOID *bootimage = NULL;
 	BOOLEAN oneshot = FALSE;
 	BOOLEAN lock_prompted = FALSE;
@@ -1232,7 +1191,7 @@ EFI_STATUS efi_main(EFI_HANDLE image, EFI_SYSTEM_TABLE *sys_table)
 	}
 #endif
 
-	/* For civ, flash images to disk is not MUST. So set device to LOCKED
+	/* For civ, flash images to disk is not MUST. So set device to LOCKED 
 	 * state by default on the first boot.
 	*/
 	if (need_lock)
@@ -1351,7 +1310,6 @@ EFI_STATUS efi_main(EFI_HANDLE image, EFI_SYSTEM_TABLE *sys_table)
 	/* AVB check */
 	disable_slot_if_efi_loaded_slot_failed();
 	ret = avb_load_verify_boot_image(boot_target, target_path, &bootimage, oneshot, &boot_state, &vb_data);
-	avb_load_verify_vendor_boot_image(boot_target, &vendorbootimage);
 
 	set_boottime_stamp(TM_VERIFY_BOOT_DONE);
 
@@ -1381,7 +1339,7 @@ EFI_STATUS efi_main(EFI_HANDLE image, EFI_SYSTEM_TABLE *sys_table)
 		break;
 	}
 
-	ret = load_image(bootimage, vendorbootimage, boot_state, boot_target,
+	ret = load_image(bootimage, boot_state, boot_target,
 			vb_data
 			);
 	if (EFI_ERROR(ret))
diff --git a/libkernelflinger/android.c b/libkernelflinger/android.c
index 07bc85f..e823a0c 100644
--- a/libkernelflinger/android.c
+++ b/libkernelflinger/android.c
@@ -58,8 +58,6 @@
 #include "firststage_mount.h"
 #endif
 
-#include "uefi_utils.h"
-
 #define OS_INITIATED L"os_initiated"
 
 /* On x86_32, stack protector save canary value(4 bytes) to GS:0x14.
@@ -526,21 +524,8 @@ struct boot_img_hdr *get_bootimage_header(VOID *bootimage_blob)
         return hdr;
 }
 
-static struct boot_params *get_boot_param_hdr (VOID *bootimage)
-{
-    int hdr_size;
-    struct boot_img_hdr *hdr;
-
-    hdr = (struct boot_img_hdr *)bootimage;
-    if (hdr->header_version < BOOT_HEADER_V3)
-        hdr_size = hdr->page_size;
-    else
-        hdr_size = BOOT_IMG_HEADER_SIZE_V3;
-
-    return (struct boot_params *)(bootimage + hdr_size);
-}
 
-static EFI_STATUS setup_ramdisk(UINT8 *bootimage, UINT8 *vendorbootimage)
+static EFI_STATUS setup_ramdisk(UINT8 *bootimage)
 {
         struct boot_img_hdr *aosp_header;
         struct boot_params *bp;
@@ -549,62 +534,28 @@ static EFI_STATUS setup_ramdisk(UINT8 *bootimage, UINT8 *vendorbootimage)
         EFI_STATUS ret;
 
         aosp_header = (struct boot_img_hdr *)bootimage;
-        bp = get_boot_param_hdr(bootimage);
-
-        if (aosp_header->header_version < BOOT_HEADER_V3) {
-            roffset = aosp_header->page_size + pagealign(aosp_header,
-                            aosp_header->kernel_size);
-            rsize = aosp_header->ramdisk_size;
-            if (!rsize) {
-                    debug(L"boot image has no ramdisk");
-                    return EFI_SUCCESS; // no ramdisk, so nothing to do
-            }
-
-            bp->hdr.ramdisk_len = rsize;
-            debug(L"ramdisk size %d", rsize);
-            ret = emalloc(rsize, 0x1000, &ramdisk_addr, FALSE);
-            if (EFI_ERROR(ret))
-                   return ret;
+        bp = (struct boot_params *)(bootimage + aosp_header->page_size);
 
-            if ((UINTN)ramdisk_addr > bp->hdr.ramdisk_max) {
-                    error(L"Ramdisk address is too high!");
-                    efree(ramdisk_addr, rsize);
-                    return EFI_OUT_OF_RESOURCES;
-            }
-            ret = memcpy_s((VOID *)(UINTN)ramdisk_addr, rsize, bootimage + roffset, rsize);
-        } else { // boot image v3
-            struct vendor_boot_img_hdr_v3 *vendor_hdr = (struct vendor_boot_img_hdr_v3 *)vendorbootimage;
-            struct boot_img_hdr_v3 *boot_hdr = (struct boot_img_hdr_v3 *)bootimage;
-
-            uint32_t page_size = vendor_hdr->page_size;
-            roffset = BOOT_IMG_HEADER_SIZE_V3 + ALIGN(boot_hdr->kernel_size, page_size);
-            rsize = boot_hdr->ramdisk_size + vendor_hdr->vendor_ramdisk_size;
-            if (!rsize) {
+        roffset = aosp_header->page_size + pagealign(aosp_header,
+                        aosp_header->kernel_size);
+        rsize = aosp_header->ramdisk_size;
+        if (!rsize) {
                 debug(L"boot image has no ramdisk");
                 return EFI_SUCCESS; // no ramdisk, so nothing to do
-            }
+        }
 
-            bp->hdr.ramdisk_len = rsize;
-            ret = emalloc(rsize, 0x1000, &ramdisk_addr, FALSE);
-            if (EFI_ERROR(ret))
+        bp->hdr.ramdisk_len = rsize;
+        debug(L"ramdisk size %d", rsize);
+        ret = emalloc(rsize, 0x1000, &ramdisk_addr, FALSE);
+        if (EFI_ERROR(ret))
                 return ret;
 
-            if ((UINTN)ramdisk_addr > bp->hdr.ramdisk_max) {
+        if ((UINTN)ramdisk_addr > bp->hdr.ramdisk_max) {
                 error(L"Ramdisk address is too high!");
                 efree(ramdisk_addr, rsize);
                 return EFI_OUT_OF_RESOURCES;
-            }
-            ret = memcpy_s((VOID *)(UINTN)ramdisk_addr, rsize,
-                            vendorbootimage + BOOT_IMG_HEADER_SIZE_V3,
-                            vendor_hdr->vendor_ramdisk_size);
-            if (EFI_ERROR(ret))
-                    return ret;
-
-
-            ret = memcpy_s((VOID *)(UINTN)ramdisk_addr + vendor_hdr->vendor_ramdisk_size,
-                            rsize, bootimage + roffset, boot_hdr->ramdisk_size);
         }
-
+        ret = memcpy_s((VOID *)(UINTN)ramdisk_addr, rsize, bootimage + roffset, rsize);
         if (EFI_ERROR(ret))
                 return ret;
 
@@ -850,32 +801,28 @@ static CHAR16 *get_command_line(IN struct boot_img_hdr *aosp_header,
 #endif
 
         if (!cmdline16) {
-                if (aosp_header->header_version < BOOT_HEADER_V3) {
-                    CHAR8 full_cmdline[BOOT_ARGS_SIZE + BOOT_EXTRA_ARGS_SIZE];
-                    int offset = BOOT_ARGS_SIZE;
-
-                    /* include the potential NUL terminal char */
-                    ret = memcpy_s(full_cmdline, sizeof(full_cmdline), aosp_header->cmdline,
-                                   BOOT_ARGS_SIZE);
-                    if (EFI_ERROR(ret))
-                            return NULL;
-
-                    /* if there is extra cmdline arguments */
-                    if (aosp_header->extra_cmdline[0]) {
-                            /* legacy boot.img format cmdline is NUL terminated */
-                            if (!aosp_header->cmdline[BOOT_ARGS_SIZE - 1])
-                                    offset--;
-                            ret = memcpy_s(full_cmdline + offset, sizeof(full_cmdline),
-                                           aosp_header->extra_cmdline, BOOT_EXTRA_ARGS_SIZE);
-                            if (EFI_ERROR(ret))
-                                    return NULL;
-                    }
-                    cmdline16 = stra_to_str(full_cmdline);
-                } else {
-                    struct boot_img_hdr_v3 *v3 = (struct boot_img_hdr_v3 *)aosp_header;
-                    cmdline16 = stra_to_str(v3->cmdline);
+                CHAR8 full_cmdline[BOOT_ARGS_SIZE + BOOT_EXTRA_ARGS_SIZE];
+                int offset = BOOT_ARGS_SIZE;
+
+                /* include the potential NUL terminal char */
+                ret = memcpy_s(full_cmdline, sizeof(full_cmdline), aosp_header->cmdline,
+                               BOOT_ARGS_SIZE);
+                if (EFI_ERROR(ret))
+                        return NULL;
+
+                /* if there is extra cmdline arguments */
+                if (aosp_header->extra_cmdline[0]) {
+                        /* legacy boot.img format cmdline is NUL terminated */
+                        if (!aosp_header->cmdline[BOOT_ARGS_SIZE - 1])
+                                offset--;
+                        ret = memcpy_s(full_cmdline + offset, sizeof(full_cmdline),
+                                       aosp_header->extra_cmdline, BOOT_EXTRA_ARGS_SIZE);
+                        if (EFI_ERROR(ret))
+                                return NULL;
                 }
 
+                cmdline16 = stra_to_str(full_cmdline);
+
                 if (!cmdline16)
                         return NULL;
 #ifndef USER
@@ -1010,7 +957,6 @@ static EFI_STATUS add_bootvars(VOID *bootimage, CHAR16 **cmdline16)
  * */
 static EFI_STATUS setup_command_line(
                 IN UINT8 *bootimage,
-                IN UINT8 *vendorbootimage,
                 IN enum boot_target boot_target,
                 IN void *parameter,
                 IN UINT8 boot_state,
@@ -1048,17 +994,14 @@ static EFI_STATUS setup_command_line(
         }
 
         aosp_header = (struct boot_img_hdr *)bootimage;
+        buf = (struct boot_params *)(bootimage + aosp_header->page_size);
+
         cmdline16 = get_command_line(aosp_header, boot_target);
         if (!cmdline16) {
                 ret = EFI_OUT_OF_RESOURCES;
                 goto out;
         }
 
-        if (aosp_header->header_version >= BOOT_HEADER_V3) {
-            struct vendor_boot_img_hdr_v3 *v3 = (struct vendor_boot_img_hdr_v3 *)vendorbootimage;
-            ret = prepend_command_line(&cmdline16, L"%a", v3->cmdline);
-        }
-
         /* Append serial number from DMI */
         serialno = get_serial_number();
         if (serialno) {
@@ -1249,7 +1192,6 @@ static EFI_STATUS setup_command_line(
                 cmdline[cmdlen] = 0;
         }
 
-        buf = get_boot_param_hdr(bootimage);
         buf->hdr.cmd_line_ptr = (UINT32)(UINTN)cmdline;
         ret = EFI_SUCCESS;
 out:
@@ -1301,7 +1243,9 @@ static EFI_STATUS handover_kernel(CHAR8 *bootimage, EFI_HANDLE parent_image)
         size_t setup_header_end;
 
         aosp_header = (struct boot_img_hdr *)bootimage;
-        buf = get_boot_param_hdr(bootimage);
+        buf = (struct boot_params *)(bootimage + aosp_header->page_size);
+
+        koffset = aosp_header->page_size;
         setup_sectors = buf->hdr.setup_secs;
         setup_sectors++; /* Add boot sector */
         setup_size = (UINT32)setup_sectors * 512;
@@ -1326,11 +1270,7 @@ static EFI_STATUS handover_kernel(CHAR8 *bootimage, EFI_HANDLE parent_image)
                         return ret;
         }
 
-        if (aosp_header->header_version < BOOT_HEADER_V3)
-            koffset = setup_size + aosp_header->page_size;
-        else
-            koffset = setup_size + BOOT_IMG_HEADER_SIZE_V3;
-        ret = memcpy_s((CHAR8 *)(UINTN)kernel_start, init_size, bootimage + koffset,
+        ret = memcpy_s((CHAR8 *)(UINTN)kernel_start, init_size, bootimage + koffset + setup_size,
                        ksize);
         if (EFI_ERROR(ret))
                 goto out;
@@ -1604,7 +1544,6 @@ out_free:
 EFI_STATUS android_image_start_buffer(
                 IN EFI_HANDLE parent_image,
                 IN VOID *bootimage,
-                IN VOID *vendorbootimage,
                 IN enum boot_target boot_target,
                 IN UINT8 boot_state,
                 IN __attribute__((unused)) EFI_GUID *swap_guid,
@@ -1624,11 +1563,8 @@ EFI_STATUS android_image_start_buffer(
                 error(L"buffer does not appear to contain an Android boot image");
                 return EFI_INVALID_PARAMETER;
         }
-        if (aosp_header->header_version >= BOOT_HEADER_V3 && vendorbootimage == NULL) {
-                error(L"vendor boot image is necessary for boot image version >= 3");
-                return EFI_INVALID_PARAMETER;
-        }
-        buf = get_boot_param_hdr(bootimage);
+
+        buf = (struct boot_params *)(bootimage + aosp_header->page_size);
 
         /* Check boot sector signature */
         if (buf->hdr.signature != 0xAA55) {
@@ -1658,8 +1594,7 @@ EFI_STATUS android_image_start_buffer(
         else
             parameter = (void *)abl_cmd_line;
 
-        ret = setup_command_line(bootimage, vendorbootimage,
-                     boot_target,
+        ret = setup_command_line(bootimage, boot_target,
                      parameter,
                      boot_state,
                      vb_data
@@ -1674,7 +1609,7 @@ EFI_STATUS android_image_start_buffer(
         use_ramdisk = !recovery_in_boot_partition() || boot_target == RECOVERY || boot_target == MEMORY;
 #endif
         if (use_ramdisk) {
-                ret = setup_ramdisk(bootimage, vendorbootimage);
+                ret = setup_ramdisk(bootimage);
                 if (EFI_ERROR(ret)) {
                         efi_perror(ret, L"setup_ramdisk");
                         goto out_cmdline;
-- 
2.17.1

