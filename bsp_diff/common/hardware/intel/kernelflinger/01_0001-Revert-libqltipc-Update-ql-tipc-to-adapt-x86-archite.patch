From 0af535dfc690e0a250b8bd9f131d2ea1d6cd602a Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Fri, 5 Feb 2021 02:29:22 +0530
Subject: [PATCH] Revert "libqltipc: Update ql-tipc to adapt x86 architecture"

This reverts commit 0ac835790c98e21c9a78b6a115b4ab709735c73a.

Reverting due to boot instability issue.

Tracked-On: OAM-95944
Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
---
 libqltipc/ql-tipc/Android.mk                  |   4 +-
 libqltipc/ql-tipc/README.md                   |   2 +
 libqltipc/ql-tipc/arch/x86/compiler.h         |  45 ----
 libqltipc/ql-tipc/arch/x86/hypercall.h        |  77 ++++++
 libqltipc/ql-tipc/arch/x86/sm_err.h           |  45 ++++
 libqltipc/ql-tipc/arch/x86/smcall.h           | 143 ++++++++++
 libqltipc/ql-tipc/arch/x86/trusty_dev.c       | 247 ++++++++++++++----
 libqltipc/ql-tipc/arch/x86/trusty_mem.c       |  80 ++----
 libqltipc/ql-tipc/libtipc.c                   |  27 +-
 .../ql-tipc/{arch/x86 => }/sysdeps_osloader.c |  33 +--
 10 files changed, 535 insertions(+), 168 deletions(-)
 delete mode 100644 libqltipc/ql-tipc/arch/x86/compiler.h
 create mode 100644 libqltipc/ql-tipc/arch/x86/hypercall.h
 create mode 100644 libqltipc/ql-tipc/arch/x86/sm_err.h
 create mode 100644 libqltipc/ql-tipc/arch/x86/smcall.h
 rename libqltipc/ql-tipc/{arch/x86 => }/sysdeps_osloader.c (77%)

diff --git a/libqltipc/ql-tipc/Android.mk b/libqltipc/ql-tipc/Android.mk
index e5090dc..315b64e 100644
--- a/libqltipc/ql-tipc/Android.mk
+++ b/libqltipc/ql-tipc/Android.mk
@@ -17,7 +17,6 @@ LOCAL_STATIC_LIBRARIES := \
 
 LOCAL_C_INCLUDES := $(KERNELFLINGER_LOCAL_PATH) \
                     $(LOCAL_PATH)/include \
-                    $(LOCAL_PATH)/arch/x86 \
                     $(LOCAL_PATH)/../interface/include \
                     $(KERNELFLINGER_LOCAL_PATH)/libsslsupport \
                     $(KERNELFLINGER_LOCAL_PATH)/avb
@@ -27,10 +26,9 @@ LOCAL_SRC_FILES := \
 	ipc_dev.c \
 	libtipc.c \
 	avb.c \
-	trusty_dev_common.c \
 	arch/x86/trusty_dev.c \
 	arch/x86/trusty_mem.c \
-	arch/x86/sysdeps_osloader.c \
+	sysdeps_osloader.c \
 	util.c \
 	keymaster.c \
 	keymaster_serializable.c \
diff --git a/libqltipc/ql-tipc/README.md b/libqltipc/ql-tipc/README.md
index 19fe04a..76e3781 100644
--- a/libqltipc/ql-tipc/README.md
+++ b/libqltipc/ql-tipc/README.md
@@ -10,6 +10,8 @@ It is intended to enable Trusty IPC in bootloader environments.
 - libtipc - Functions to be called by library user
 - ipc - IPC library
 - ipc_dev - Helper functions for sending requests to the secure OS
+- rpmb_proxy - Handles RPMB requests from secure storage service
+- avb - Sends requests to the Android Verified Boot service
 
 ### Misc
 
diff --git a/libqltipc/ql-tipc/arch/x86/compiler.h b/libqltipc/ql-tipc/arch/x86/compiler.h
deleted file mode 100644
index 3796a67..0000000
--- a/libqltipc/ql-tipc/arch/x86/compiler.h
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (c) 2021, Intel Corporation
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *    * Redistributions of source code must retain the above copyright
- *      notice, this list of conditions and the following disclaimer.
- *    * Redistributions in binary form must reproduce the above copyright
- *      notice, this list of conditions and the following disclaimer
- *      in the documentation and/or other materials provided with the
- *      distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef TRUSTY_QL_TIPC_COMPILER_H_
-#define TRUSTY_QL_TIPC_COMPILER_H_
-
-#pragma  GCC diagnostic ignored "-Wunused-parameter"
-
-#ifndef offsetof
-#if __GNUC__ > 3
-#define offsetof(type, member) __builtin_offsetof(type, member)
-#else
-#define offsetof(type, member) ((size_t)( (char *)&(((type *)0)->member) - (char *)0 ))
-#endif
-#endif
-
-#define TRUSTY_QL_TIPC_MAX_BUFFER_LEN PAGE_SIZE
-
-#endif
diff --git a/libqltipc/ql-tipc/arch/x86/hypercall.h b/libqltipc/ql-tipc/arch/x86/hypercall.h
new file mode 100644
index 0000000..d6728a2
--- /dev/null
+++ b/libqltipc/ql-tipc/arch/x86/hypercall.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifdef HYPERVISOR_ACRN
+
+#define ACRN_SMC_HC_ID 0x80000071
+inline unsigned long smc(unsigned long r0,
+                         unsigned long r1,
+                         unsigned long r2,
+                         unsigned long r3)
+{
+    register unsigned long smc_id asm("r8") = ACRN_SMC_HC_ID;
+    asm volatile(
+    "pushq %%rbx;" /* save the rbx */
+    "movq %8, %%rbx;"
+    "vmcall; \n"
+    "movq %%rbx, %3;"
+    "popq %%rbx;" /* restore the old rbx */
+    : "=D"(r0), "=S"(r1), "=d"(r2), "=r"(r3)
+    : "r"(smc_id), "D"(r0), "S"(r1), "d"(r2), "r"(r3)
+    : "rax"
+    );
+    return r0;
+}
+
+#else
+
+#define EVMM_SMC_HC_ID 0x74727500
+inline unsigned long smc(unsigned long r0,
+                         unsigned long r1,
+                         unsigned long r2,
+                         unsigned long r3)
+{
+    asm volatile(
+#if ARCH_X86_32
+    "pushl %%ebx;" /* save the ebx */
+    "movl %8, %%ebx;"
+    "vmcall; \n"
+    "movl %%ebx, %3;"
+    "popl %%ebx;" /* restore the old ebx */
+#elif ARCH_X86_64
+    "pushq %%rbx;" /* save the rbx */
+    "movq %8, %%rbx;"
+    "vmcall; \n"
+    "movq %%rbx, %3;"
+    "popq %%rbx;" /* restore the old rbx */
+#endif
+
+    : "=D"(r0), "=S"(r1), "=d"(r2), "=r"(r3)
+    : "a"(EVMM_SMC_HC_ID), "D"(r0), "S"(r1), "d"(r2), "r"(r3)
+    );
+
+    return r0;
+}
+
+#endif
diff --git a/libqltipc/ql-tipc/arch/x86/sm_err.h b/libqltipc/ql-tipc/arch/x86/sm_err.h
new file mode 100644
index 0000000..9401256
--- /dev/null
+++ b/libqltipc/ql-tipc/arch/x86/sm_err.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef QL_TIPC_SM_ERR_H_
+#define QL_TIPC_SM_ERR_H_
+
+/* Errors from the secure monitor */
+#define SM_ERR_UNDEFINED_SMC		0xFFFFFFFF /* Unknown SMC (defined by ARM DEN 0028A(0.9.0) */
+#define SM_ERR_INVALID_PARAMETERS	-2
+#define SM_ERR_INTERRUPTED		-3	/* Got interrupted. Call back with restart SMC */
+#define SM_ERR_UNEXPECTED_RESTART	-4	/* Got an restart SMC when we didn't expect it */
+#define SM_ERR_BUSY			-5	/* Temporarily busy. Call back with original args */
+#define SM_ERR_INTERLEAVED_SMC		-6	/* Got a trusted_service SMC when a restart SMC is required */
+#define SM_ERR_INTERNAL_FAILURE		-7	/* Unknown error */
+#define SM_ERR_NOT_SUPPORTED		-8
+#define SM_ERR_NOT_ALLOWED		-9	/* SMC call not allowed */
+#define SM_ERR_END_OF_INPUT		-10
+#define SM_ERR_PANIC			-11	/* Secure OS crashed */
+#define SM_ERR_FIQ_INTERRUPTED		-12	/* Got interrupted by FIQ. Call back with SMC_SC_RESTART_FIQ on same CPU */
+#define SM_ERR_CPU_IDLE			-13	/* SMC call waiting for another CPU */
+#define SM_ERR_NOP_INTERRUPTED		-14	/* Got interrupted. Call back with new SMC_SC_NOP */
+#define SM_ERR_NOP_DONE			-15	/* Cpu idle after SMC_SC_NOP (not an error) */
+
+#endif /* QL_TIPC_SM_ERR_H_ */
diff --git a/libqltipc/ql-tipc/arch/x86/smcall.h b/libqltipc/ql-tipc/arch/x86/smcall.h
new file mode 100644
index 0000000..695776c
--- /dev/null
+++ b/libqltipc/ql-tipc/arch/x86/smcall.h
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef QL_TIPC_SMCALL_H_
+#define QL_TIPC_SMCALL_H_
+
+#define SMC_NUM_ENTITIES	64
+#define SMC_NUM_ARGS		4
+#define SMC_NUM_PARAMS		(SMC_NUM_ARGS - 1)
+
+#define SMC_IS_FASTCALL(smc_nr)	((smc_nr) & 0x80000000)
+#define SMC_IS_SMC64(smc_nr)	((smc_nr) & 0x40000000)
+#define SMC_ENTITY(smc_nr)	(((smc_nr) & 0x3F000000) >> 24)
+#define SMC_FUNCTION(smc_nr)	((smc_nr) & 0x0000FFFF)
+
+#define SMC_NR(entity, fn, fastcall, smc64) ((((fastcall) & 0x1) << 31) | \
+					     (((smc64) & 0x1) << 30) | \
+					     (((entity) & 0x3F) << 24) | \
+					     ((fn) & 0xFFFF) \
+					    )
+
+#define SMC_FASTCALL_NR(entity, fn)	SMC_NR((entity), (fn), 1, 0)
+#define SMC_STDCALL_NR(entity, fn)	SMC_NR((entity), (fn), 0, 0)
+#define SMC_FASTCALL64_NR(entity, fn)	SMC_NR((entity), (fn), 1, 1)
+#define SMC_STDCALL64_NR(entity, fn)	SMC_NR((entity), (fn), 0, 1)
+
+#define	SMC_ENTITY_ARCH			0	/* ARM Architecture calls */
+#define	SMC_ENTITY_CPU			1	/* CPU Service calls */
+#define	SMC_ENTITY_SIP			2	/* SIP Service calls */
+#define	SMC_ENTITY_OEM			3	/* OEM Service calls */
+#define	SMC_ENTITY_STD			4	/* Standard Service calls */
+#define	SMC_ENTITY_RESERVED		5	/* Reserved for future use */
+#define	SMC_ENTITY_TRUSTED_APP		48	/* Trusted Application calls */
+#define	SMC_ENTITY_TRUSTED_OS		50	/* Trusted OS calls */
+#define	SMC_ENTITY_LOGGING		51	/* Used for secure -> nonsecure logging */
+#define	SMC_ENTITY_SECURE_MONITOR	60	/* Trusted OS calls internal to secure monitor */
+
+/* FC = Fast call, SC = Standard call */
+#define SMC_SC_RESTART_LAST	SMC_STDCALL_NR  (SMC_ENTITY_SECURE_MONITOR, 0)
+#define SMC_SC_LOCKED_NOP	SMC_STDCALL_NR  (SMC_ENTITY_SECURE_MONITOR, 1)
+
+/**
+ * SMC_SC_RESTART_FIQ - Re-enter trusty after it was interrupted by an fiq
+ *
+ * No arguments, no return value.
+ *
+ * Re-enter trusty after returning to ns to process an fiq. Must be called iff
+ * trusty returns SM_ERR_FIQ_INTERRUPTED.
+ *
+ * Enable by selecting api version TRUSTY_API_VERSION_RESTART_FIQ (1) or later.
+ */
+#define SMC_SC_RESTART_FIQ	SMC_STDCALL_NR  (SMC_ENTITY_SECURE_MONITOR, 2)
+
+/**
+ * SMC_SC_NOP - Enter trusty to run pending work.
+ *
+ * No arguments.
+ *
+ * Returns SM_ERR_NOP_INTERRUPTED or SM_ERR_NOP_DONE.
+ * If SM_ERR_NOP_INTERRUPTED is returned, the call must be repeated.
+ *
+ * Enable by selecting api version TRUSTY_API_VERSION_SMP (2) or later.
+ */
+#define SMC_SC_NOP		SMC_STDCALL_NR  (SMC_ENTITY_SECURE_MONITOR, 3)
+
+/*
+ * Return from secure os to non-secure os with return value in r1
+ */
+#define SMC_SC_NS_RETURN	SMC_STDCALL_NR  (SMC_ENTITY_SECURE_MONITOR, 0)
+
+#define SMC_FC_RESERVED		SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 0)
+#define SMC_FC_FIQ_EXIT		SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 1)
+#define SMC_FC_REQUEST_FIQ	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 2)
+#define SMC_FC_GET_NEXT_IRQ	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 3)
+#define SMC_FC_FIQ_ENTER	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 4)
+
+#define SMC_FC64_SET_FIQ_HANDLER SMC_FASTCALL64_NR(SMC_ENTITY_SECURE_MONITOR, 5)
+#define SMC_FC64_GET_FIQ_REGS	SMC_FASTCALL64_NR (SMC_ENTITY_SECURE_MONITOR, 6)
+
+#define SMC_FC_CPU_SUSPEND	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 7)
+#define SMC_FC_CPU_RESUME	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 8)
+
+#define SMC_FC_AARCH_SWITCH	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 9)
+#define SMC_FC_GET_VERSION_STR	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 10)
+
+/**
+ * SMC_FC_API_VERSION - Find and select supported API version.
+ *
+ * @r1: Version supported by client.
+ *
+ * Returns version supported by trusty.
+ *
+ * If multiple versions are supported, the client should start by calling
+ * SMC_FC_API_VERSION with the largest version it supports. Trusty will then
+ * return a version it supports. If the client does not support the version
+ * returned by trusty and the version returned is less than the version
+ * requested, repeat the call with the largest supported version less than the
+ * last returned version.
+ *
+ * This call must be made before any calls that are affected by the api version.
+ */
+#define TRUSTY_API_VERSION_RESTART_FIQ	(1)
+#define TRUSTY_API_VERSION_SMP		(2)
+#define TRUSTY_API_VERSION_SMP_NOP	(3)
+#define TRUSTY_API_VERSION_CURRENT	(3)
+#define SMC_FC_API_VERSION	SMC_FASTCALL_NR (SMC_ENTITY_SECURE_MONITOR, 11)
+
+/* TRUSTED_OS entity calls */
+#define SMC_SC_VIRTIO_GET_DESCR	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 20)
+#define SMC_SC_VIRTIO_START	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 21)
+#define SMC_SC_VIRTIO_STOP	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 22)
+
+#define SMC_SC_VDEV_RESET	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 23)
+#define SMC_SC_VDEV_KICK_VQ	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 24)
+#define SMC_NC_VDEV_KICK_VQ	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 25)
+
+/* Queueless Trusty IPC Interface */
+#define SMC_SC_TRUSTY_IPC_CREATE_QL_DEV		SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 30)
+#define SMC_SC_TRUSTY_IPC_SHUTDOWN_QL_DEV	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 31)
+#define SMC_SC_TRUSTY_IPC_HANDLE_QL_DEV_CMD	SMC_STDCALL_NR(SMC_ENTITY_TRUSTED_OS, 32)
+
+#endif /* QL_TIPC_SMCALL_H_ */
diff --git a/libqltipc/ql-tipc/arch/x86/trusty_dev.c b/libqltipc/ql-tipc/arch/x86/trusty_dev.c
index 6f6eaae..e6eae41 100644
--- a/libqltipc/ql-tipc/arch/x86/trusty_dev.c
+++ b/libqltipc/ql-tipc/arch/x86/trusty_dev.c
@@ -1,61 +1,212 @@
 /*
- * Copyright (c) 2019 LK Trusty Authors. All Rights Reserved.
+ * Copyright (C) 2016 The Android Open Source Project
  *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files
- * (the "Software"), to deal in the Software without restriction,
- * including without limitation the rights to use, copy, modify, merge,
- * publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
  */
 
-#include <trusty/smc.h>
-
-#define SMC_VMCALL_ID 0x74727500
-
-struct smc_ret8 smc8(unsigned long r0, unsigned long r1,
-                     unsigned long r2, unsigned long r3,
-                     unsigned long r4, unsigned long r5,
-                     unsigned long r6, unsigned long r7) {
-    struct smc_ret8 ret;
-    register unsigned long smc_id __asm__("rax") = SMC_VMCALL_ID;
-    register unsigned long arg0 __asm__("rdi") = r0;
-    register unsigned long arg1 __asm__("rsi") = r1;
-    register unsigned long arg2 __asm__("rdx") = r2;
-    register unsigned long arg3 __asm__("rcx") = r3;
-    register unsigned long arg4 __asm__("r8")  = r4;
-    register unsigned long arg5 __asm__("r9")  = r5;
-    register unsigned long arg6 __asm__("r10") = r6;
-    register unsigned long arg7 __asm__("r11") = r7;
-
-    __asm__ __volatile__(
-            "vmcall\n"
-            : "=r" (arg0), "=r" (arg1), "=r" (arg2), "=r" (arg3),
-            "=r" (arg4), "=r" (arg5), "=r" (arg6), "=r" (arg7)
-            : "r" (smc_id),  "r" (arg0), "r" (arg1), "r" (arg2), "r" (arg3),
-            "r" (arg4), "r" (arg5), "r" (arg6), "r" (arg7)
-            : "memory");
-
-    ret.r0 = arg0;
-    ret.r1 = arg1;
-    ret.r2 = arg2;
-    ret.r3 = arg3;
-    ret.r4 = arg4;
-    ret.r5 = arg5;
-    ret.r6 = arg6;
-    ret.r7 = arg7;
+#include <trusty/trusty_dev.h>
+#include <trusty/util.h>
+
+#include "sm_err.h"
+#include "smcall.h"
+#include "hypercall.h"
+
+struct trusty_dev;
+
+#define LOCAL_LOG 0
+
+#define UNUSED(x) (void)(x)
+
+static int32_t trusty_fast_call32(struct trusty_dev *dev, uint32_t smcnr,
+                                  uint32_t a0, uint32_t a1, uint32_t a2)
+{
+    UNUSED(dev);
+    trusty_assert(dev);
+    trusty_assert(SMC_IS_FASTCALL(smcnr));
+
+    return smc(smcnr, a0, a1, a2);
+}
+
+static unsigned long trusty_std_call_inner(struct trusty_dev *dev,
+                                           unsigned long smcnr,
+                                           unsigned long a0,
+                                           unsigned long a1,
+                                           unsigned long a2)
+{
+    unsigned long ret;
+    int retry = 5;
+
+    UNUSED(dev);
+
+    trusty_debug("%a(0x%lx 0x%lx 0x%lx 0x%lx)\n", __func__, smcnr, a0, a1, a2);
+
+    while (true) {
+        ret = smc(smcnr, a0, a1, a2);
+        while ((int32_t)ret == SM_ERR_FIQ_INTERRUPTED)
+            ret = smc(SMC_SC_RESTART_FIQ, 0, 0, 0);
+        if ((int)ret != SM_ERR_BUSY || !retry)
+            break;
+
+        trusty_debug("%a(0x%lx 0x%lx 0x%lx 0x%lx) returned busy, retry\n",
+                     __func__, smcnr, a0, a1, a2);
+
+        retry--;
+    }
+
+    return ret;
+}
+
+static unsigned long trusty_std_call_helper(struct trusty_dev *dev,
+                                            unsigned long smcnr,
+                                            unsigned long a0,
+                                            unsigned long a1,
+                                            unsigned long a2)
+{
+    unsigned long ret;
+    unsigned long irq_state;
+
+    while (true) {
+        trusty_local_irq_disable(&irq_state);
+        ret = trusty_std_call_inner(dev, smcnr, a0, a1, a2);
+        trusty_local_irq_restore(&irq_state);
+
+        if ((int)ret != SM_ERR_BUSY)
+            break;
+
+        trusty_idle(dev);
+    }
+
+    return ret;
+}
+
+static int32_t trusty_std_call32(struct trusty_dev *dev, uint32_t smcnr,
+                                 uint32_t a0, uint32_t a1, uint32_t a2)
+{
+    int ret;
+
+    trusty_assert(dev);
+    trusty_assert(!SMC_IS_FASTCALL(smcnr));
+
+    if (smcnr != SMC_SC_NOP) {
+        trusty_lock(dev);
+    }
+
+    trusty_debug("%a(0x%x 0x%x 0x%x 0x%x) started\n", __func__,
+                 smcnr, a0, a1, a2);
+
+    ret = trusty_std_call_helper(dev, smcnr, a0, a1, a2);
+    while (ret == SM_ERR_INTERRUPTED || ret == SM_ERR_CPU_IDLE) {
+        trusty_debug("%a(0x%x 0x%x 0x%x 0x%x) interrupted\n", __func__,
+                     smcnr, a0, a1, a2);
+        if (ret == SM_ERR_CPU_IDLE) {
+            trusty_idle(dev);
+        }
+        ret = trusty_std_call_helper(dev, SMC_SC_RESTART_LAST, 0, 0, 0);
+    }
+
+    trusty_debug("%a(0x%x 0x%x 0x%x 0x%x) returned 0x%x\n",
+                 __func__, smcnr, a0, a1, a2, ret);
+
+    if (smcnr != SMC_SC_NOP) {
+        trusty_unlock(dev);
+    }
 
     return ret;
 }
+
+static int trusty_call32_mem_buf(struct trusty_dev *dev, uint32_t smcnr,
+                                 struct ns_mem_page_info *page, uint32_t size)
+{
+    trusty_assert(dev);
+    trusty_assert(page);
+
+    if (SMC_IS_FASTCALL(smcnr)) {
+        return trusty_fast_call32(dev, smcnr,
+                                  (uint32_t)page->attr,
+                                  (uint32_t)(page->attr >> 32), size);
+    } else {
+        return trusty_std_call32(dev, smcnr,
+                                 (uint32_t)page->attr,
+                                 (uint32_t)(page->attr >> 32), size);
+    }
+}
+
+int trusty_dev_init_ipc(struct trusty_dev *dev,
+                        struct ns_mem_page_info *buf, uint32_t buf_size)
+{
+    return trusty_call32_mem_buf(dev, SMC_SC_TRUSTY_IPC_CREATE_QL_DEV,
+                                 buf, buf_size);
+}
+
+int trusty_dev_exec_ipc(struct trusty_dev *dev,
+                        struct ns_mem_page_info *buf, uint32_t buf_size)
+{
+    return trusty_call32_mem_buf(dev, SMC_SC_TRUSTY_IPC_HANDLE_QL_DEV_CMD,
+                                 buf, buf_size);
+}
+
+int trusty_dev_shutdown_ipc(struct trusty_dev *dev,
+                            struct ns_mem_page_info *buf, uint32_t buf_size)
+{
+    return trusty_call32_mem_buf(dev, SMC_SC_TRUSTY_IPC_SHUTDOWN_QL_DEV,
+                                 buf, buf_size);
+}
+
+
+static int trusty_init_api_version(struct trusty_dev *dev)
+{
+    uint32_t api_version;
+
+    api_version = trusty_fast_call32(dev, SMC_FC_API_VERSION,
+                                     TRUSTY_API_VERSION_CURRENT, 0, 0);
+    if (api_version == SM_ERR_UNDEFINED_SMC)
+        api_version = 0;
+
+    if (api_version > TRUSTY_API_VERSION_CURRENT) {
+        trusty_error("unsupported trusty api version %d > %d\n",
+                     api_version, TRUSTY_API_VERSION_CURRENT);
+        return -1;
+    }
+
+    trusty_info("selected trusty api version: %d (requested %d)\n",
+                api_version, TRUSTY_API_VERSION_CURRENT);
+
+    dev->api_version = api_version;
+
+    return 0;
+}
+
+int trusty_dev_init(struct trusty_dev *dev, void *priv_data)
+{
+    trusty_assert(dev);
+
+    dev->priv_data = priv_data;
+    return trusty_init_api_version(dev);
+}
+
+int trusty_dev_shutdown(struct trusty_dev *dev)
+{
+    trusty_assert(dev);
+
+    dev->priv_data = NULL;
+    return 0;
+}
+
diff --git a/libqltipc/ql-tipc/arch/x86/trusty_mem.c b/libqltipc/ql-tipc/arch/x86/trusty_mem.c
index 0ab8962..159a8e4 100644
--- a/libqltipc/ql-tipc/arch/x86/trusty_mem.c
+++ b/libqltipc/ql-tipc/arch/x86/trusty_mem.c
@@ -1,73 +1,45 @@
 /*
- * Copyright (c) 2019 LK Trusty Authors. All Rights Reserved.
+ * Copyright (C) 2016 The Android Open Source Project
  *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files
- * (the "Software"), to deal in the Software without restriction,
- * including without limitation the rights to use, copy, modify, merge,
- * publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
  */
 
-#include <stdint.h>
 #include <trusty/trusty_dev.h>
+#include <trusty/util.h>
+#include <stdint.h>
 
-/*
- * TIPC defines physical address bits 47:12, memory type and cache
- * attributes bits 55:48. This defition is differential from x86,
- * use this definition to align Trusty.
- */
-#define NS_PHYS_MEM_WIDTH_SHIFT 48
-#define NS_MEM_TYPE_UNCACHED 0x44ULL /* uncached */
+#define NS_MAIR_NORMAL_UNCACHED            0x44 /* uncached */
 
-#define FFA_MEM_ATTR_NORMAL_MEMORY_UNCACHED ((2U << 4) | (0x1U << 2))
-#define FFA_MEM_PERM_RW (1U << 1)
+int trusty_encode_page_info(struct ns_mem_page_info *inf, void *va)
+{
+    uint64_t par = (uint64_t)(uintptr_t)va;
 
-/*
- * Bootloader, which integrates ql-tipc component, should implement
- * it's own qltipc_x86_get_mapping function call to overwrite weak
- * function.
- * If bootloader creates 1-on-1 mapping, which means physical address
- * is idenical to virtual address, bootloader could utilizes this
- * weak function direclty. Or physcial address shoule be retrived from
- * bootloader's mapping method.
- */
-__attribute__((weak))
-int qltipc_x86_get_mapping(uint64_t va, uint64_t* pa, uint64_t* flags) {
-    *pa = va;
+    /* ToDo */
+    /* _PAGE_USER */
+    //par |= (1 << 6);
+    /* _PAGE_RW */
+    //par |= (1 << 7);
 
-    *flags = NS_MEM_TYPE_UNCACHED << NS_PHYS_MEM_WIDTH_SHIFT;
+    inf->attr = (par & 0x0000FFFFFFFFFFFFull) | ((uint64_t)NS_MAIR_NORMAL_UNCACHED << 48);
 
     return 0;
 }
 
-int trusty_encode_page_info(struct ns_mem_page_info* inf, void* va) {
-    int ret;
-    uint64_t flags;
-    uint64_t pa;
-
-    ret = qltipc_x86_get_mapping((uint64_t)va, &pa, &flags);
-    if (0 != ret) {
-        inf->attr = 0;
-        return ret;
-    }
-
-    inf->paddr = pa;
-    inf->attr = pa | flags;
-    inf->ffa_mem_attr = FFA_MEM_ATTR_NORMAL_MEMORY_UNCACHED;
-    inf->ffa_mem_perm = FFA_MEM_PERM_RW;
-
-    return 0;
-}
diff --git a/libqltipc/ql-tipc/libtipc.c b/libqltipc/ql-tipc/libtipc.c
index 5153dc9..7d75bdc 100644
--- a/libqltipc/ql-tipc/libtipc.c
+++ b/libqltipc/ql-tipc/libtipc.c
@@ -35,8 +35,13 @@ typedef uintptr_t vaddr_t;
 
 static struct trusty_ipc_dev* _ipc_dev;
 static struct trusty_dev _tdev; /* There should only be one trusty device */
+static void* rpmb_ctx;
 
 void trusty_ipc_shutdown(void) {
+    (void)rpmb_storage_proxy_shutdown(_ipc_dev);
+    (void)rpmb_storage_put_ctx(rpmb_ctx);
+
+    (void)avb_tipc_shutdown(_ipc_dev);
     (void)km_tipc_shutdown(_ipc_dev);
 
     /* shutdown Trusty IPC device */
@@ -58,13 +63,31 @@ int trusty_ipc_init(void) {
 
     /* create Trusty IPC device */
     trusty_info("Initializing Trusty IPC device\n");
-    rc = trusty_ipc_dev_create(&_ipc_dev, &_tdev,
-                               TRUSTY_QL_TIPC_MAX_BUFFER_LEN);
+    rc = trusty_ipc_dev_create(&_ipc_dev, &_tdev, PAGE_SIZE);
     if (rc != 0) {
         trusty_error("Initializing Trusty IPC device failed (%d)\n", rc);
         return rc;
     }
 
+    /* get storage rpmb */
+    rpmb_ctx = rpmb_storage_get_ctx();
+
+    /* start secure storage proxy service */
+    trusty_info("Initializing RPMB storage proxy service\n");
+    rc = rpmb_storage_proxy_init(_ipc_dev, rpmb_ctx);
+    if (rc != 0) {
+        trusty_error("Initlializing RPMB storage proxy service failed (%d)\n",
+                     rc);
+        return rc;
+    }
+
+    trusty_info("Initializing Trusty AVB client\n");
+    rc = avb_tipc_init(_ipc_dev);
+    if (rc != 0) {
+        trusty_error("Initlializing Trusty AVB client failed (%d)\n", rc);
+        return rc;
+    }
+
     trusty_info("Initializing Trusty Keymaster client\n");
     rc = km_tipc_init(_ipc_dev);
     if (rc != 0) {
diff --git a/libqltipc/ql-tipc/arch/x86/sysdeps_osloader.c b/libqltipc/ql-tipc/sysdeps_osloader.c
similarity index 77%
rename from libqltipc/ql-tipc/arch/x86/sysdeps_osloader.c
rename to libqltipc/ql-tipc/sysdeps_osloader.c
index 6fe4a81..dcfdfe4 100644
--- a/libqltipc/ql-tipc/arch/x86/sysdeps_osloader.c
+++ b/libqltipc/ql-tipc/sysdeps_osloader.c
@@ -30,6 +30,9 @@
 
 #define UNUSED(x) (void)(x)
 
+extern int trusty_encode_page_info(struct ns_mem_page_info *page_info,
+                                   void *vaddr);
+
 void trusty_lock(struct trusty_dev *dev)
 {
     UNUSED(dev);
@@ -49,7 +52,7 @@ void trusty_local_irq_restore(unsigned long *state)
     UNUSED(state);
 }
 
-void trusty_idle(struct trusty_dev *dev, bool event_poll)
+void trusty_idle(struct trusty_dev *dev)
 {
     /* ToDo */
     UNUSED(dev);
@@ -73,7 +76,7 @@ void trusty_printf(const char *format, ...)
     FreePool(format16);
 }
 
-void *trusty_memcpy(void *dest, const void *src, size_t n)
+void *trusty_memcpy(void *dest, void *src, size_t n)
 {
     EFI_STATUS ret;
     ret = memcpy_s(dest, n, src, n);
@@ -108,18 +111,15 @@ void trusty_free(void *addr)
         FreePool(addr);
 }
 
-void *trusty_alloc_pages(unsigned count)
+void *trusty_membuf_alloc_page_aligned(struct ns_mem_page_info *page_info, size_t size)
 {
     void *pa = NULL;
+    int res;
     EFI_STATUS ret;
     EFI_PHYSICAL_ADDRESS Memory = 0XFFFFFFFF;
 
-    ret = uefi_call_wrapper(BS->AllocatePages,
-                            4,
-                            AllocateMaxAddress,
-                            EfiLoaderData,
-                            EFI_SIZE_TO_PAGES(count * PAGE_SIZE),
-                            &Memory);
+    ret = uefi_call_wrapper(BS->AllocatePages, 4, AllocateMaxAddress,
+                                            EfiLoaderData, EFI_SIZE_TO_PAGES(size), &Memory);
     if (EFI_ERROR(ret)) {
         trusty_printf("alloc page failed\n");
         return NULL;
@@ -127,15 +127,16 @@ void *trusty_alloc_pages(unsigned count)
 
     /* get memory attibutes */
     pa = (VOID *)(UINTN)Memory;
-
+    res = trusty_encode_page_info(page_info, pa);
+    if (res) {
+        trusty_membuf_free_page_aligned(pa, size);
+        return NULL;
+    }
     return pa;
 }
 
-void trusty_free_pages(void *va, unsigned count)
+void trusty_membuf_free_page_aligned(void *pa, size_t size)
 {
-    if (va)
-        uefi_call_wrapper(BS->FreePages,
-                          2,
-                          (EFI_PHYSICAL_ADDRESS)(UINTN)va,
-                          EFI_SIZE_TO_PAGES(count * PAGE_SIZE));
+    if (pa)
+        uefi_call_wrapper(BS->FreePages, 2, (EFI_PHYSICAL_ADDRESS)(UINTN)pa, EFI_SIZE_TO_PAGES(size));
 }
-- 
2.17.1

