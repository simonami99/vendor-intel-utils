From eb20f9e63b2be43e053c00954936e3cdefdd6aeb Mon Sep 17 00:00:00 2001
From: kbillore <kaushal.billore@intel.com>
Date: Thu, 26 Mar 2020 18:37:39 +0530
Subject: [PATCH] Camera switch new implementation

Tracked-On : OAM-90226
Signed-off-by: Shiva Kumara  <shiva.kumara.rudrappa@intel.com>
Signed-off-by: kbillore <kaushal.billore@intel.com>
---
 .../com/intel/multicamera/CameraBase.java     |  96 ++-
 .../com/intel/multicamera/MultiCamera.java    |  53 ++
 .../intel/multicamera/MultiViewActivity.java  | 568 ++++++++++++++++--
 .../res/drawable/camera_switch.png            | Bin 0 -> 700 bytes
 .../res/drawable/ic_camera_switch.png         | Bin 0 -> 901 bytes
 .../res/drawable/ic_wall_moun_camera.png      | Bin 0 -> 904 bytes
 .../res/layout/activity_itscameraintents.xml  |  17 +
 .../res/layout/botmleftcam.xml                |  18 +
 .../res/layout/botmrightcam.xml               |  19 +
 .../res/layout/topleftcam.xml                 |  17 +
 .../res/layout/toprightcam.xml                |  19 +
 .../res/values/strings.xml                    |   2 +-
 12 files changed, 760 insertions(+), 49 deletions(-)
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/MultiCamera.java
 create mode 100644 camera/MultiCameraApplication/res/drawable/camera_switch.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_camera_switch.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_wall_moun_camera.png

diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java b/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
index a9aa89e..d630727 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
@@ -24,6 +24,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
+import android.graphics.Camera;
 import android.graphics.ImageFormat;
 import android.graphics.Matrix;
 import android.graphics.RectF;
@@ -40,6 +41,7 @@ import android.net.Uri;
 import android.os.Build;
 import android.os.Handler;
 import android.os.HandlerThread;
+import android.os.Looper;
 import android.os.Message;
 import android.os.SystemClock;
 import android.provider.MediaStore;
@@ -62,6 +64,7 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
+import java.util.concurrent.TimeUnit;
 
 public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.OnInfoListener {
     private Activity mActivity;
@@ -70,7 +73,8 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
      * An {@link AutoFitTextureView} for camera preview.
      */
     private AutoFitTextureView textureView;
-    private ImageButton FullScrn, SettingsView, takePictureButton, TakeVideoButton;
+    private ImageButton FullScrn, SettingsView, takePictureButton, TakeVideoButton, cameraSwitch,
+                        cameraSplit;
 
     private MediaRecorder mMediaRecorder;
     private String cameraId;
@@ -92,7 +96,7 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
     private long mRecordingStartTime;
     private boolean mRecordingTimeCountsDown = false;
     private static final int MSG_UPDATE_RECORD_TIME = 5;
-    private static final String SIZE_HD = "HD 720p";
+    private static final String SIZE_HD = "SD 480p";
 
     /**
      * Whether the app is recording video now
@@ -132,7 +136,7 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
                       RoundedThumbnailView roundedThumbnailView) {
         this.mActivity = activity;
         this.textureView = mtextureView;
-        this.ClickListeners(Button[0], Button[1]);
+        this.ClickListeners(Button[0], Button[1], Button[4], Button[5]);
         SettingsView = Button[2];
         FullScrn = Button[3];
         this.settings = PreferenceManager.getDefaultSharedPreferences(activity);
@@ -336,10 +340,13 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
         }
     }
 
-    private void ClickListeners(ImageButton PictureButton, ImageButton RecordButton) {
+    private void ClickListeners(ImageButton PictureButton, ImageButton RecordButton,
+                                ImageButton CameraSwitch, ImageButton CameraSplit) {
         TakePicureOnClicked(PictureButton);
 
         StartVideoRecording(RecordButton);
+        CameraSwitch(CameraSwitch);
+        CameraSplit(CameraSplit);
     }
 
     private void TakePicureOnClicked(ImageButton PictureButton) {
@@ -349,7 +356,66 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
         takePictureButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
+                MultiCamera ic_camera = MultiCamera.getInstance();
+                MultiViewActivity Mactivity = (MultiViewActivity) mActivity;
+                if (ic_camera.getIsCameraOrSurveillance() == 1) {
+                    Mactivity.enterFullScreen(v);
+                }
                 takePicture();
+                Mactivity.enableSingleCameraButtons();
+                MultiCamera.getInstance().setIsCameraOrSurveillance(0);
+            }
+        });
+    }
+
+    private void CameraSwitch(ImageButton CameraSwitch) {
+        cameraSwitch = CameraSwitch;
+        if (cameraSwitch == null) return;
+
+        cameraSwitch.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+                MultiCamera ic_camera = MultiCamera.getInstance();
+                if (ic_camera.getWhichCamera() == 0) {
+                    MultiViewActivity Mactivity = (MultiViewActivity) mActivity;
+                    Mactivity.openFrontCamera();
+                    ic_camera.setWhichCamera(1);
+                }
+                else {
+                    MultiViewActivity Mactivity = (MultiViewActivity) mActivity;
+                    Mactivity.openBackCamera();
+                    ic_camera.setWhichCamera(0);
+                }
+            }
+        });
+    }
+
+    private void CameraSplit(ImageButton cameraSplit) {
+        cameraSplit = cameraSplit;
+        if (cameraSplit == null) return;
+
+        cameraSplit.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                //Toast.makeText(mActivity, "camera split clicked ", Toast.LENGTH_LONG).show();
+                MultiCamera ic_camera = MultiCamera.getInstance();
+                MultiViewActivity Mactivity = (MultiViewActivity) mActivity;
+                if (ic_camera.getIsCameraOrSurveillance() == 0){
+                    Mactivity.startCamera();
+                    Mactivity.hideCameraSwitchButton();
+                    ic_camera.setIsCameraOrSurveillance(1);
+                }
+                else {
+                    Mactivity.visibleCameraSwitchButton();
+                    if(ic_camera.getWhichCamera() == 0) {
+                        Mactivity.openBackCamera();
+                    }
+                    else {
+                        Mactivity.openFrontCamera();
+                    }
+                    ic_camera.setIsCameraOrSurveillance(0);
+                }
             }
         });
     }
@@ -360,12 +426,22 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
         TakeVideoButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (mIsRecordingVideo) {
-                    stopRecordingVideo();
-
-                } else {
-                    startRecordingVideo();
+                MultiCamera ic_camera = MultiCamera.getInstance();
+                MultiViewActivity Mactivity = (MultiViewActivity) mActivity;
+                try {
+                    TimeUnit.SECONDS.sleep(1);
+                    if (mIsRecordingVideo) {
+                        stopRecordingVideo();
+                    } else {
+                        if (ic_camera.getIsCameraOrSurveillance() == 1) {
+                            Mactivity.enterFullScreen(view);
+                        }
+                        startRecordingVideo();
+                    }
+                } catch (Exception e) {
                 }
+                Mactivity.enableSingleCameraButtons();
+                MultiCamera.getInstance().setIsCameraOrSurveillance(0);
             }
         });
     }
@@ -571,7 +647,7 @@ public class CameraBase implements MediaRecorder.OnErrorListener, MediaRecorder.
 
         } else {
             mDimensions = SettingsPrefUtil.sizeFromSettingString(
-                    settings.getString(Capture_Key, "1280x720"));
+                    settings.getString(Capture_Key, "640x480"));
         }
 
         return mDimensions;
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/MultiCamera.java b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiCamera.java
new file mode 100644
index 0000000..2f46fc6
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiCamera.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+public class MultiCamera {
+    private static MultiCamera ic_instance = null;
+
+    MultiCamera() {
+        WhichCamera = 0;
+        IsCameraOrSurveillance = 0;
+    }
+    public static MultiCamera getInstance() {
+        if (ic_instance == null) {
+            ic_instance = new MultiCamera();
+        }
+
+        return ic_instance;
+    }
+
+    private int WhichCamera;
+
+    private int IsCameraOrSurveillance;
+
+    public int getWhichCamera() {
+        return WhichCamera;
+    }
+
+    public void setWhichCamera(int whichCamera) {
+        WhichCamera = whichCamera;
+    }
+
+    public int getIsCameraOrSurveillance() {
+        return IsCameraOrSurveillance;
+    }
+
+    public void setIsCameraOrSurveillance(int isCameraOrSurveillance) {
+        IsCameraOrSurveillance = isCameraOrSurveillance;
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
index d13f9d8..66858a7 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
@@ -40,6 +40,7 @@ import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
 import java.io.IOException;
 import java.util.HashMap;
+import java.util.concurrent.TimeUnit;
 
 import static android.hardware.usb.UsbManager.ACTION_USB_DEVICE_ATTACHED;
 import static android.hardware.usb.UsbManager.ACTION_USB_DEVICE_DETACHED;
@@ -52,9 +53,12 @@ public class MultiViewActivity extends AppCompatActivity {
     private AutoFitTextureView mTopLeftCam_textureView, mTopRightCam_textureView,
             mBotmLeftCam_textureView, mBotmRightCam_textureView;
 
-    private ImageButton mTopLeftCam_RecordButton, mTopLeftCam_PictureButton,
-            mTopRightCam_PictureButton, mBotmLeftCam_PictureButton, mBotmRightCam_PictureButton,
-            mTopRightCam_RecordButton, mBotmLeftCam_RecordButton, mBotmRightCam_RecordButton;
+    private ImageButton mTopLeftCam_RecordButton, mTopLeftCam_PictureButton, mTopLeftCam_Switch,
+            mTopLeftCam_Split, mTopRightCam_PictureButton, mTopRightCam_RecordButton,
+            mTopRightCam_Switch, mTopRightCam_Split, mBotmLeftCam_PictureButton,
+            mBotmLeftCam_RecordButton, mBotmLeftCam_Switch, mBotmLeftCam_Split,
+            mBotmRightCam_PictureButton, mBotmRightCam_RecordButton, mBotRightCam_Switch,
+            mBotRightCam_Split;
 
     private ImageButton SettingView0, SettingView1, SettingView2, SettingView3, SettingClose0,
             SettingClose1, SettingClose2, SettingClose3, FullScrn0, FullScrn1, FullScrn2, FullScrn3,
@@ -88,6 +92,7 @@ public class MultiViewActivity extends AppCompatActivity {
 
     private int[] FrameVisibility;
     private boolean exitScrnFlag;
+    private boolean exitRecordScrnFlag;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -117,8 +122,19 @@ public class MultiViewActivity extends AppCompatActivity {
         FullScrn_Init();
 
         set_FrameVisibilities();
-        
-        startCamera();
+
+        openBackCamera();
+
+        exitScrn0.setVisibility(View.GONE);
+        exitScrn1.setVisibility(View.GONE);
+        exitScrn2.setVisibility(View.GONE);
+        exitScrn3.setVisibility(View.GONE);
+
+        FullScrn0.setVisibility(View.GONE);
+        FullScrn1.setVisibility(View.GONE);
+        FullScrn2.setVisibility(View.GONE);
+        FullScrn3.setVisibility(View.GONE);
+
         IntentFilter filter = new IntentFilter();
         filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
         filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
@@ -174,6 +190,43 @@ public class MultiViewActivity extends AppCompatActivity {
             Log.d(TAG, "onResume No CAMERA CONNECTED");
         }
     }
+
+    public void openFrontCamera() {
+        closeCamera();
+        GetCameraCnt();
+        updateStorageSpace(null);
+
+        LinearLayout LinLayout1 = findViewById(R.id.TopLayout);
+
+        LinearLayout LinLayout2 = findViewById(R.id.BtmLayout);
+
+        LinLayout1.setVisibility(View.GONE);
+        LinLayout2.setVisibility(View.GONE);
+
+        frameView1.setVisibility(FrameLayout.GONE);
+        LinLayout1.setVisibility(View.VISIBLE);
+        OpenOnlyFrontCamera();
+    }
+    public void openBackCamera() {
+        closeCamera();
+        GetCameraCnt();
+        if (numOfCameras == 1) {
+            findViewById(R.id.camera_switch0).setVisibility(View.GONE);
+        }
+        updateStorageSpace(null);
+
+        LinearLayout LinLayout1 = findViewById(R.id.TopLayout);
+
+        LinearLayout LinLayout2 = findViewById(R.id.BtmLayout);
+
+        LinLayout1.setVisibility(View.GONE);
+        LinLayout2.setVisibility(View.GONE);
+
+        frameView1.setVisibility(FrameLayout.GONE);
+        LinLayout1.setVisibility(View.VISIBLE);
+        OpenOnlyBackCamera();
+    }
+
     private void set_FrameVisibilities() {
         FrameVisibility = new int[4];
         frameView0 = findViewById(R.id.control1);
@@ -252,18 +305,23 @@ public class MultiViewActivity extends AppCompatActivity {
 
     public void Open_TopLeftCam() {
         String[] Data = new String[5];
-        ImageButton[] Buttons = new ImageButton[4];
+        ImageButton[] Buttons = new ImageButton[6];
 
         mTopLeftCam_textureView = findViewById(R.id.textureview0);
         if (mTopLeftCam_textureView == null) return;
 
+        mTopLeftCam_Switch = findViewById(R.id.camera_switch0);
+        mTopLeftCam_Switch.setVisibility(View.VISIBLE);
         mTopLeftCam_PictureButton = findViewById(R.id.Picture0);
         mTopLeftCam_RecordButton = findViewById(R.id.Record0);
+        mTopLeftCam_Split = findViewById(R.id.camera_split_view0);
 
         Buttons[0] = mTopLeftCam_PictureButton;
         Buttons[1] = mTopLeftCam_RecordButton;
         Buttons[2] = SettingView0;
         Buttons[3] = FullScrn0;
+        Buttons[4] = mTopLeftCam_Switch;
+        Buttons[5] = mTopLeftCam_Split;
 
         mRecordingTimeView = findViewById(R.id.recording_time);
 
@@ -281,17 +339,22 @@ public class MultiViewActivity extends AppCompatActivity {
 
     public void Open_TopRightCam() {
         String[] Data = new String[5];
-        ImageButton[] Buttons = new ImageButton[4];
+        ImageButton[] Buttons = new ImageButton[6];
         mTopRightCam_textureView = findViewById(R.id.textureview1);
         if (mTopRightCam_textureView == null) return;
 
+        mTopRightCam_Switch = findViewById(R.id.camera_switch1);
+        mTopRightCam_Switch.setVisibility(View.VISIBLE);
         mTopRightCam_PictureButton = findViewById(R.id.Picture1);
         mTopRightCam_RecordButton = findViewById(R.id.Record1);
+        mTopRightCam_Split = findViewById(R.id.camera_split_view1);
 
         Buttons[0] = mTopRightCam_PictureButton;
         Buttons[1] = mTopRightCam_RecordButton;
         Buttons[2] = SettingView1;
         Buttons[3] = FullScrn1;
+        Buttons[4] = mTopRightCam_Switch;
+        Buttons[5] = mTopRightCam_Split;
 
         Data[0] = "TopRightCam";
         Data[1] = CameraIds[1];
@@ -309,17 +372,21 @@ public class MultiViewActivity extends AppCompatActivity {
 
     public void Open_BotmLeftCam() {
         String[] Data = new String[5];
-        ImageButton[] Buttons = new ImageButton[4];
+        ImageButton[] Buttons = new ImageButton[6];
         mBotmLeftCam_textureView = findViewById(R.id.textureview2);
         if (mBotmLeftCam_textureView == null) return;
 
+        mBotmLeftCam_Switch = findViewById(R.id.camera_switch2);
         mBotmLeftCam_PictureButton = findViewById(R.id.Picture2);
         mBotmLeftCam_RecordButton = findViewById(R.id.Record2);
+        mBotmLeftCam_Split = findViewById(R.id.camera_split_view2);
 
         Buttons[0] = mBotmLeftCam_PictureButton;
         Buttons[1] = mBotmLeftCam_RecordButton;
         Buttons[2] = SettingView2;
         Buttons[3] = FullScrn2;
+        Buttons[4] = mBotmLeftCam_Switch;
+        Buttons[5] = mBotmLeftCam_Split;
 
         Data[0] = "BotmLeftCam";
         Data[1] = CameraIds[2];
@@ -337,17 +404,21 @@ public class MultiViewActivity extends AppCompatActivity {
 
     public void Open_BotmRightCam() {
         String[] Data = new String[5];
-        ImageButton[] Buttons = new ImageButton[4];
+        ImageButton[] Buttons = new ImageButton[6];
         mBotmRightCam_textureView = findViewById(R.id.textureview3);
         if (mTopRightCam_textureView == null) return;
 
+        mBotRightCam_Switch = findViewById(R.id.camera_switch3);
         mBotmRightCam_PictureButton = findViewById(R.id.Picture3);
         mBotmRightCam_RecordButton = findViewById(R.id.Record3);
+        mBotRightCam_Split = findViewById(R.id.camera_split_view3);
 
         Buttons[0] = mBotmRightCam_PictureButton;
         Buttons[1] = mBotmRightCam_RecordButton;
         Buttons[2] = SettingView3;
         Buttons[3] = FullScrn3;
+        Buttons[4] = mBotRightCam_Switch;
+        Buttons[5] = mBotRightCam_Split;
 
         Data[0] = "BotmRightCam";
         Data[1] = CameraIds[3];
@@ -363,6 +434,29 @@ public class MultiViewActivity extends AppCompatActivity {
                                        mRecordingTimeView2, Data, roundedThumbnailView);
     }
 
+    private void OpenOnlyBackCamera() {
+        frameView0.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[0] = frameView0.getVisibility();
+        if (mTopLeftCam == null) {
+            Open_TopLeftCam();
+        } else if (mTopLeftCam_textureView == null) {
+            mTopLeftCam_textureView = findViewById(R.id.textureview0);
+        }
+
+        if (mTopLeftCam == null) return;
+        if (mTopLeftCam_textureView == null) return;
+
+        if (mTopLeftCam_textureView.isAvailable()) {
+            mTopLeftCam.textureListener.onSurfaceTextureAvailable(
+                    mTopLeftCam_textureView.getSurfaceTexture(), mTopLeftCam_textureView.getWidth(),
+                    mTopLeftCam_textureView.getHeight());
+        } else {
+            mTopLeftCam_textureView.setSurfaceTextureListener(mTopLeftCam.textureListener);
+        }
+        if (numOfCameras > 1)
+            findViewById(R.id.camera_switch0).setVisibility(View.VISIBLE);
+    }
+
     private void manageTopLeftCam() {
         frameView0.setVisibility(FrameLayout.VISIBLE);
         FrameVisibility[0] = frameView0.getVisibility();
@@ -372,6 +466,9 @@ public class MultiViewActivity extends AppCompatActivity {
             mTopLeftCam_textureView = findViewById(R.id.textureview0);
         }
 
+        if (mTopLeftCam == null) return;
+        if (mTopLeftCam_textureView == null) return;
+
         if (mTopLeftCam_textureView.isAvailable()) {
             mTopLeftCam.textureListener.onSurfaceTextureAvailable(
                     mTopLeftCam_textureView.getSurfaceTexture(), mTopLeftCam_textureView.getWidth(),
@@ -379,8 +476,93 @@ public class MultiViewActivity extends AppCompatActivity {
         } else {
             mTopLeftCam_textureView.setSurfaceTextureListener(mTopLeftCam.textureListener);
         }
+        findViewById(R.id.camera_switch0).setVisibility(View.VISIBLE);
+    }
+
+    private void OpenOnlyFrontCamera() {
+        frameView0.setVisibility(View.GONE);
+        frameView1.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[0] = frameView1.getVisibility();
+        if (mTopRightCam == null) {
+            Open_TopRightCam();
+
+        } else if (mTopRightCam_textureView == null) {
+            mTopRightCam_textureView = findViewById(R.id.textureview1);
+        }
+
+        if (mTopRightCam == null) return;
+        if (mTopRightCam_textureView == null) return;
+
+        if (mTopRightCam_textureView.isAvailable()) {
+            mTopRightCam.textureListener.onSurfaceTextureAvailable(
+                    mTopRightCam_textureView.getSurfaceTexture(),
+                    mTopRightCam_textureView.getWidth(), mTopRightCam_textureView.getHeight());
+        } else {
+            mTopRightCam_textureView.setSurfaceTextureListener(mTopRightCam.textureListener);
+        }
     }
 
+    public void hideCameraSwitchButton() {
+        findViewById(R.id.camera_switch0).setVisibility(View.GONE);
+        findViewById(R.id.camera_switch1).setVisibility(View.GONE);
+        findViewById(R.id.camera_switch2).setVisibility(View.GONE);
+        findViewById(R.id.camera_switch3).setVisibility(View.GONE);
+
+        findViewById(R.id.imageView0).setVisibility(View.VISIBLE);
+        findViewById(R.id.imageView1).setVisibility(View.VISIBLE);
+        findViewById(R.id.imageView2).setVisibility(View.VISIBLE);
+        findViewById(R.id.imageView3).setVisibility(View.VISIBLE);
+
+        findViewById(R.id.camera_split_view0).setVisibility(View.GONE);
+        findViewById(R.id.camera_split_view1).setVisibility(View.GONE);
+        findViewById(R.id.camera_split_view2).setVisibility(View.GONE);
+        findViewById(R.id.camera_split_view3).setVisibility(View.GONE);
+
+    }
+    public void visibleCameraSwitchButton() {
+        exitScrn0.setVisibility(View.GONE);
+        exitScrn1.setVisibility(View.GONE);
+        exitScrn2.setVisibility(View.GONE);
+        exitScrn3.setVisibility(View.GONE);
+
+        FullScrn0.setVisibility(View.GONE);
+        FullScrn1.setVisibility(View.GONE);
+        FullScrn2.setVisibility(View.GONE);
+        FullScrn3.setVisibility(View.GONE);
+
+        findViewById(R.id.camera_switch0).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch1).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch2).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch3).setVisibility(View.VISIBLE);
+
+        findViewById(R.id.imageView0).setVisibility(View.GONE);
+        findViewById(R.id.imageView1).setVisibility(View.GONE);
+        findViewById(R.id.imageView2).setVisibility(View.GONE);
+        findViewById(R.id.imageView3).setVisibility(View.GONE);
+
+        findViewById(R.id.camera_split_view0).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_split_view1).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_split_view2).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_split_view3).setVisibility(View.VISIBLE);
+    }
+
+    void enableSingleCameraButtons() {
+        findViewById(R.id.camera_switch0).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch1).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch2).setVisibility(View.VISIBLE);
+        findViewById(R.id.camera_switch3).setVisibility(View.VISIBLE);
+
+        exitScrn0.setVisibility(View.GONE);
+        exitScrn1.setVisibility(View.GONE);
+        exitScrn2.setVisibility(View.GONE);
+        exitScrn3.setVisibility(View.GONE);
+
+        FullScrn0.setVisibility(View.GONE);
+        FullScrn1.setVisibility(View.GONE);
+        FullScrn2.setVisibility(View.GONE);
+        FullScrn3.setVisibility(View.GONE);
+
+    }
     private void manageTopRightCam() {
         frameView1.setVisibility(FrameLayout.VISIBLE);
         FrameVisibility[1] = frameView1.getVisibility();
@@ -391,6 +573,9 @@ public class MultiViewActivity extends AppCompatActivity {
             mTopRightCam_textureView = findViewById(R.id.textureview1);
         }
 
+        if (mTopRightCam == null) return;
+        if (mTopRightCam_textureView == null) return;
+
         if (mTopRightCam_textureView.isAvailable()) {
             mTopRightCam.textureListener.onSurfaceTextureAvailable(
                     mTopRightCam_textureView.getSurfaceTexture(),
@@ -410,6 +595,9 @@ public class MultiViewActivity extends AppCompatActivity {
             mBotmLeftCam_textureView = findViewById(R.id.textureview2);
         }
 
+        if (mBotmLeftCam == null) return;
+        if (mBotmLeftCam_textureView == null) return;
+
         if (mBotmLeftCam_textureView.isAvailable()) {
             mBotmLeftCam.textureListener.onSurfaceTextureAvailable(
                     mBotmLeftCam_textureView.getSurfaceTexture(),
@@ -429,6 +617,9 @@ public class MultiViewActivity extends AppCompatActivity {
             mBotmRightCam_textureView = findViewById(R.id.textureview3);
         }
 
+        if (mBotmRightCam == null) return;
+        if (mBotmRightCam_textureView == null) return;
+
         if (mBotmRightCam_textureView.isAvailable()) {
             mBotmRightCam.textureListener.onSurfaceTextureAvailable(
                     mBotmRightCam_textureView.getSurfaceTexture(),
@@ -442,8 +633,20 @@ public class MultiViewActivity extends AppCompatActivity {
     protected void onResume() {
         super.onResume();
         Log.e(TAG, "onResume");
+        MultiCamera ic_cam = MultiCamera.getInstance();
+        if (ic_cam.getIsCameraOrSurveillance() == 1){
+            startCamera();
+            hideCameraSwitchButton();
+        }
+        else {
+            if (ic_cam.getWhichCamera() == 0) {
+                openBackCamera();
+            }
+            else {
+                openFrontCamera();
+            }
 
-
+        }
     }
 
     private void closeCamera() {
@@ -677,9 +880,17 @@ public class MultiViewActivity extends AppCompatActivity {
         LinLayout1 = findViewById(R.id.TopLayout);
 
         LinLayout2 = findViewById(R.id.BtmLayout);
-
+        MultiCamera ic_camera = MultiCamera.getInstance();
         switch (view.getId()) {
             case R.id.imageView0:
+
+                if (ic_camera.getIsCameraOrSurveillance() == 1) {
+                    openBackCamera();
+                    visibleCameraSwitchButton();
+                    ic_camera.setIsCameraOrSurveillance(0);
+                }
+                break;
+            case R.id.Picture0:
                 this.setTitle("TopLeftCam");
                 exitScrnFlag = true;
                 exitScrn0.setVisibility(View.VISIBLE);
@@ -690,57 +901,185 @@ public class MultiViewActivity extends AppCompatActivity {
                 LinLayout2.setVisibility(View.GONE);
 
                 break;
+            case R.id.Record0:
+                    this.setTitle("TopLeftCam");
+                    if (exitRecordScrnFlag == true) {
+
+                        this.setTitle("MultiCamera");
+                        exitRecordScrnFlag = false;
+                        LinLayout1.setVisibility(View.GONE);
+                        LinLayout2.setVisibility(View.GONE);
+                        if (numOfCameras == 1) {
+                            frameView1.setVisibility(FrameLayout.GONE);
+                            LinLayout1.setVisibility(View.VISIBLE);
+
+                        } else if (numOfCameras == 2) {
+                            LinLayout1.setVisibility(View.VISIBLE);
+                            frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                        } else if (numOfCameras == 3) {
+                            LinLayout1.setVisibility(View.VISIBLE);
+                            LinLayout2.setVisibility(View.VISIBLE);
+
+                        } else if (numOfCameras == 4) {
+                            LinLayout1.setVisibility(View.VISIBLE);
+                            LinLayout2.setVisibility(View.VISIBLE);
+
+                        } else {
+                            Log.d(TAG, "onResume No CAMERA CONNECTED");
+                        }
+                        FullScrn0.setVisibility(View.VISIBLE);
+
+                        exitScrn0.setVisibility(View.GONE);
+
+                        FrameVisibility[1] = frameView1.getVisibility();
+                    }else {
+                        exitRecordScrnFlag = true;
+                        exitScrn0.setVisibility(View.GONE);
+                        FullScrn0.setVisibility(View.GONE);
+
+                        frameView1.setVisibility(View.GONE);
+
+                        LinLayout2.setVisibility(View.GONE);
+                    }
+                break;
             case R.id.exitFullScreen0:
+
                 this.setTitle("MultiCamera");
                 exitScrnFlag = false;
+                LinLayout1.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+                if (numOfCameras == 1) {
+                    frameView1.setVisibility(FrameLayout.GONE);
+                    LinLayout1.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 2) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                } else if (numOfCameras == 3) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 4) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
 
+                } else {
+                    Log.d(TAG, "onResume No CAMERA CONNECTED");
+                }
                 FullScrn0.setVisibility(View.VISIBLE);
 
                 exitScrn0.setVisibility(View.GONE);
 
-                switch (FrameVisibility[1]) {
+                FrameVisibility[1] = frameView1.getVisibility();
+
+                break;
+            case R.id.imageView1:
+                if (ic_camera.getIsCameraOrSurveillance() == 1) {
+                    openFrontCamera();
+                    visibleCameraSwitchButton();
+                    ic_camera.setIsCameraOrSurveillance(0);
+                }
+                break;
+            case R.id.Picture1:
+                this.setTitle("TopRightCam");
+                exitScrnFlag = true;
+                FullScrn1.setVisibility(View.GONE);
+                exitScrn1.setVisibility(View.VISIBLE);
+
+                frameView0.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+
+                break;
+            case R.id.Record1:
+                this.setTitle("TopRightCam");
+                if (exitRecordScrnFlag == true) {
+                    this.setTitle("MultiCamera");
+                    exitRecordScrnFlag = false;
+                    LinLayout1.setVisibility(View.GONE);
+                    LinLayout2.setVisibility(View.GONE);
+                    if (numOfCameras == 1) {
+                        frameView1.setVisibility(FrameLayout.GONE);
+                        LinLayout1.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 2) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                    } else if (numOfCameras == 3) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 4) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else {
+                        Log.d(TAG, "onResume No CAMERA CONNECTED");
+                    }
+
+                    FullScrn1.setVisibility(View.VISIBLE);
+                    exitScrn1.setVisibility(View.GONE);
+
+                switch (FrameVisibility[0]) {
                     case View.VISIBLE:
 
-                        frameView1.setVisibility(View.VISIBLE);
+                        frameView0.setVisibility(View.VISIBLE);
 
                         break;
 
                     case View.INVISIBLE:
 
-                        frameView1.setVisibility(View.INVISIBLE);
+                        frameView0.setVisibility(View.INVISIBLE);
 
                         break;
                     default:
                         break;
                 }
 
-                FrameVisibility[1] = frameView1.getVisibility();
-
-                LinLayout2.setVisibility(View.VISIBLE);
-
-                break;
-            case R.id.imageView1:
-                this.setTitle("TopRightCam");
-                exitScrnFlag = true;
-                FullScrn1.setVisibility(View.GONE);
-                exitScrn1.setVisibility(View.VISIBLE);
-
-                frameView0.setVisibility(View.GONE);
-                LinLayout2.setVisibility(View.GONE);
+                    FrameVisibility[0] = frameView0.getVisibility();
+                }else {
+                    exitRecordScrnFlag = true;
+                    FullScrn1.setVisibility(View.GONE);
+                    exitScrn1.setVisibility(View.GONE);
 
+                    frameView0.setVisibility(View.GONE);
+                    LinLayout2.setVisibility(View.GONE);
+                }
                 break;
             case R.id.exitFullScreen1:
                 this.setTitle("MultiCamera");
 
                 exitScrnFlag = false;
+                LinLayout1.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+                if (numOfCameras == 1) {
+                    frameView1.setVisibility(FrameLayout.GONE);
+                    LinLayout1.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 2) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                } else if (numOfCameras == 3) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 4) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else {
+                    Log.d(TAG, "onResume No CAMERA CONNECTED");
+                }
+
                 FullScrn1.setVisibility(View.VISIBLE);
                 exitScrn1.setVisibility(View.GONE);
 
                 switch (FrameVisibility[0]) {
                     case View.VISIBLE:
-
                         frameView0.setVisibility(View.VISIBLE);
-
                         break;
 
                     case View.INVISIBLE:
@@ -753,12 +1092,10 @@ public class MultiViewActivity extends AppCompatActivity {
                 }
 
                 FrameVisibility[0] = frameView0.getVisibility();
-
-                LinLayout2.setVisibility(View.VISIBLE);
-
                 break;
 
             case R.id.imageView2:
+            case R.id.Picture2:
                 this.setTitle("BotmLeftCam");
 
                 exitScrnFlag = true;
@@ -768,11 +1105,91 @@ public class MultiViewActivity extends AppCompatActivity {
                 frameView3.setVisibility(View.GONE);
                 LinLayout1.setVisibility(View.GONE);
 
+                break;
+            case R.id.Record2:
+                this.setTitle("BotmLeftCam");
+                if (exitRecordScrnFlag == true) {
+                    this.setTitle("MultiCamera");
+
+                    exitRecordScrnFlag = false;
+                    LinLayout1.setVisibility(View.GONE);
+                    LinLayout2.setVisibility(View.GONE);
+                    if (numOfCameras == 1) {
+                        frameView1.setVisibility(FrameLayout.GONE);
+                        LinLayout1.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 2) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                    } else if (numOfCameras == 3) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 4) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else {
+                        Log.d(TAG, "onResume No CAMERA CONNECTED");
+                    }
+
+                    FullScrn2.setVisibility(View.VISIBLE);
+                    exitScrn2.setVisibility(View.GONE);
+
+                switch (FrameVisibility[3]) {
+                    case View.VISIBLE:
+
+                        frameView3.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView3.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                FrameVisibility[3] = frameView3.getVisibility();
+
+                }else {
+                    exitRecordScrnFlag = true;
+                    FullScrn2.setVisibility(View.GONE);
+                    exitScrn2.setVisibility(View.GONE);
+
+                    frameView3.setVisibility(View.GONE);
+                    LinLayout1.setVisibility(View.GONE);
+                }
                 break;
             case R.id.exitFullScreen2:
                 this.setTitle("MultiCamera");
 
                 exitScrnFlag = false;
+                LinLayout1.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+                if (numOfCameras == 1) {
+                    frameView1.setVisibility(FrameLayout.GONE);
+                    LinLayout1.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 2) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                } else if (numOfCameras == 3) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 4) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else {
+                    Log.d(TAG, "onResume No CAMERA CONNECTED");
+                }
+
                 FullScrn2.setVisibility(View.VISIBLE);
                 exitScrn2.setVisibility(View.GONE);
 
@@ -793,11 +1210,9 @@ public class MultiViewActivity extends AppCompatActivity {
                 }
 
                 FrameVisibility[3] = frameView3.getVisibility();
-
-                LinLayout1.setVisibility(View.VISIBLE);
-
                 break;
             case R.id.imageView3:
+            case R.id.Picture3:
                 this.setTitle("BotmRightCam");
                 exitScrnFlag = true;
                 FullScrn3.setVisibility(View.GONE);
@@ -806,10 +1221,90 @@ public class MultiViewActivity extends AppCompatActivity {
                 frameView2.setVisibility(View.GONE);
                 LinLayout1.setVisibility(View.GONE);
 
+                break;
+            case R.id.Record3:
+                if (exitRecordScrnFlag == true) {
+                    this.setTitle("MultiCamera");
+                    exitRecordScrnFlag = false;
+
+                    LinLayout1.setVisibility(View.GONE);
+                    LinLayout2.setVisibility(View.GONE);
+                    if (numOfCameras == 1) {
+                        frameView1.setVisibility(FrameLayout.GONE);
+                        LinLayout1.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 2) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                    } else if (numOfCameras == 3) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else if (numOfCameras == 4) {
+                        LinLayout1.setVisibility(View.VISIBLE);
+                        LinLayout2.setVisibility(View.VISIBLE);
+
+                    } else {
+                        Log.d(TAG, "onResume No CAMERA CONNECTED");
+                    }
+
+                    FullScrn3.setVisibility(View.VISIBLE);
+                    exitScrn3.setVisibility(View.GONE);
+
+                switch (FrameVisibility[2]) {
+                    case View.VISIBLE:
+
+                        frameView2.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView2.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                    FrameVisibility[2] = frameView2.getVisibility();
+                }else {
+                    this.setTitle("BotmRightCam");
+                    exitRecordScrnFlag = true;
+                    FullScrn3.setVisibility(View.GONE);
+                    exitScrn3.setVisibility(View.GONE);
+
+                    frameView2.setVisibility(View.GONE);
+                    LinLayout1.setVisibility(View.GONE);
+                }
                 break;
             case R.id.exitFullScreen3:
                 this.setTitle("MultiCamera");
                 exitScrnFlag = false;
+
+                LinLayout1.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+                if (numOfCameras == 1) {
+                    frameView1.setVisibility(FrameLayout.GONE);
+                    LinLayout1.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 2) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    frameView1.setVisibility(FrameLayout.VISIBLE);
+
+                } else if (numOfCameras == 3) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else if (numOfCameras == 4) {
+                    LinLayout1.setVisibility(View.VISIBLE);
+                    LinLayout2.setVisibility(View.VISIBLE);
+
+                } else {
+                    Log.d(TAG, "onResume No CAMERA CONNECTED");
+                }
+
                 FullScrn3.setVisibility(View.VISIBLE);
                 exitScrn3.setVisibility(View.GONE);
 
@@ -830,9 +1325,6 @@ public class MultiViewActivity extends AppCompatActivity {
                 }
 
                 FrameVisibility[2] = frameView2.getVisibility();
-
-                LinLayout1.setVisibility(View.VISIBLE);
-
                 break;
             default:
                 break;
diff --git a/camera/MultiCameraApplication/res/drawable/camera_switch.png b/camera/MultiCameraApplication/res/drawable/camera_switch.png
new file mode 100644
index 0000000000000000000000000000000000000000..f675acaf53c22b3650f79d2a2c47c749c9599af7
GIT binary patch
literal 700
zcmeAS@N?(olHy`uVBq!ia0vp^av;pX0wgC|rfC8xmUKs7M+SzC{oH>NS%G|oWRD<U
z28Jp%28M<f28Lfip@tU>45bDP46hOx7_4S6Fo+k-*%fF5lweBoc6VX;-`;;_Kaj^+
z;1OBOz`%C|gc+x5^GO2**-JcqUD=;7bMlHwayNNsF)%Q$_jGX#u{eEoilKLOphVmJ
z+c%^IlsR;jIK0?7vzCg8AM`8`n=OCg;=!}^3nq6jevnaE<nhlzEqr3o8-=FM$!xb4
zE%02h^5e@3Nwcf_mz8DRfBB*A{o&)5&#l@2dAnwwo{+C0#d_fSo~JkapT@r8eqSN~
z<}0^p(Zw#s&=`|Xj3VM|D(7eEb$mZGS?>3QzPWF1^iFsxs^6Ju?7#3dqqyeeg-6}(
zK8Uj4`CxS6>8aXovAf^30``_1W{lZ9Rcot`W%~Y!6aSuz<Vw5t!6ae*Y+?4fg~uEX
zpI0&1AFVodXY2VJs{DJu-EyAZ^S0Q0>gr_W#8?Y$z1w?=XX$lsj#HV`YqBSO{b9M%
z3U|KSuj7R3Chh9c^8M6PR<Za=W{|Jj<pSvwDs2`@pEqA(l~X*;`CRs%rFx3wOFn-?
zzt*?+e{H$B?2tw9%T7PJ8F`Yki?15z@A-HpwD?%w(xP60I|WB?^i*<-otbS|raFcD
zU{v{K&T5x8g@?`_(8yH&Bz(U4{pMqgp$}Lu^RVupaDK<*`&sPAb*g`7e7LqLd7{A)
z>1CCt=D(I^pR&UBd(GCnPaaRKce~Fhr}%usV{au<U~H<ExJHzuB$lLFB^RXvDF!10
zBLiInV_gHw5JO`tBO@y#Q(XfSD+2@f(_w)q8glbfGSez?YcQMk?k!LQgQu&X%Q~lo
FCIEAP7w!N6

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_camera_switch.png b/camera/MultiCameraApplication/res/drawable/ic_camera_switch.png
new file mode 100644
index 0000000000000000000000000000000000000000..f180dc9483db517656a279dc8f7c752007a89726
GIT binary patch
literal 901
zcmeAS@N?(olHy`uVBq!ia0vp^8X(NU0wmSG7d!(}Ea{HEjtmSN`?>!lvI6-E$sR$z
z3=CCj3=9n|3=F@3LJcn%7)lKo7+xhXFj&oCU=S~uvn$XBD8ZEE?e4<xzrFv=ejty%
z#M9T6{RuM{ixz94$j{$E`Cd;K#}JR>Z>QSkUk(syn_vCbLf-e%mdsxhw*>?mDyXQm
zL_I4@O>)!u%b%0e^QVPRc0xqtjF*000?zEKxKv)S`(9e&d2318n`+4gste2JnDp$K
zTzh_Jf9<=<e%}A4Yg_^zC^tNmzFtvKFOb0K6ZSND;%D|%ld6>OJ=FWke#eP>o=be6
zuRGJdMZRAz)LpB~eU)0Dz?kdxy6EiX?`L{{?ta|(eBsIuwYOu1=Nsr<o1%P2)j`BS
zC%;uRZKC+kM`7<C&Y8mEz0rN;f^xn2D{rJ<zVSt7qi$68weB-MTa;rb9b2?r=GBV6
z>e-W>pI0V1=iD`nKWi_+omW2pQpnG52dlNdF4{UlPKv$B<XThQlp`)V8MlrG9_^U<
zSLE?RM!^T4^JXS)U^DeA6mapFq$tV6%NTZ(eNxJW8*>Vrrk$KO+o?gYs7J_^iEFly
ztIenSKQ<Z$uCG2t38jlQ3l*v{m9z9Y_bT0+8rrPsrtz4EYt82Cx9n|S&0=K`Z|5=7
zjhXeL&U@X)<2#R8U+P%7?(?c*2PxmV$vJtybG|d~l2MZMoilNfPm_<kj%QPH$nOY_
z;$z!Q?HoM&EO^h&P;ve)5qXC3YFEcIW8r;$Us%%^**Bbw>x?>+=yP-?he5@HTp^d0
z2CpV381{3_neK2qA|*5E&+7AC#Uh)I|M+U~%|f?p$CD04hO?HbukO4s`0e1(Y{Ql+
zrP9G<=4-R*$ipfJgOih&Id!WgOh}m{_~dJ&g2%)oM_GB44%hS7J1V;zx?Ja-q`mw7
z8v#w}=uNL{GXDt2Fh5^?&vftkq`wcIMXvk5=+D(<VV|zuwqDe*;mWESmF3R2#DmuU
zT6pi2?^BM3?;1XbB_2J0lX-ozPQ3hwc-dc^I{Qv_iSp>k0n@5#iEBhjN@7W>RdP`(
zkYX@0Ff!0JFxE9R2r)3RGBL6;Fx3Sz3=G15?Yx7cAvZrIGp!Q02DRmk2|x`Dp00i_
I>zopr0MM{^!vFvP

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_wall_moun_camera.png b/camera/MultiCameraApplication/res/drawable/ic_wall_moun_camera.png
new file mode 100644
index 0000000000000000000000000000000000000000..ef3044f98ca2cb240a2a61d4a99d4bcd1f122aa3
GIT binary patch
literal 904
zcmeAS@N?(olHy`uVBq!ia0vp^8X(NU0wmSG7d!(}Ea{HEjtmSN`?>!lvI6-`N#5=*
z4FB8v&+G^C*h@TpUD=;7bFrwIB^6$O2$bLB>EamTas2Hx-we@kiMIJWC6nu}s6}1w
z=-S46@Xvx!Z(S$N9RjTN(F^l-X|B8TLW#Szi97m2ujuO_myV@NLz@(@1ZC`=xJw`~
z=}hR9X=1mu)S5aUKFfM^xplI^vp)0kNmF0!o@sn$&htIbYwrL2@nC7N!Q7KfA%^XW
zY{vtF*|<JPt^U~|`lV>fn=J`Rz0x)><NH?i|2^fkoQHc&@$CCQ=KITB&b>dMDS&59
z`EuENy$3_wZBksdmdq&ZoL_nGx7y0%p+QPPJhiv){(HqdfB7DE9&d&&<D6}0yZItx
z!gD5Vu;?k8b>mRjtd(<0-l~}uuAZ@3>-vwSw$F4!_urOLTiB2lwyC*y&&eK<iP@>u
z6Bt$}^2%?X=Q?F+gYDI?1x#zE@!vRTB{sp6mw83Ud`YvaQ`N#j+e&(8l;+DsJo_iY
zSP|C0=b_;BC`o=VhtgF7J(}lvcfD9JU4~`b1ux0UqL`(vlXbjUt6j{Wzj&hdb45+%
zK}Po4g!%D5+Lj09ZN2@S=W)5k;n!!<#ENGeFMDNqcy9<F^E)G<BVO5UmwDVCyKO7%
zyszeXLgDAf?bc7`{hjkr=lY_;6KT&rG5>W<sGXC_f8SW<;Xdsjw=b9#U+jF6Q@n6)
z=W^3m_S<$}-N~j`HeYtz@6OF!SqpZYIlb}q-)Zy3LiP&&|JEYCw$>_EXZyJ*=E-G=
zFP=Z<w0)8%{;Qbh+l^?s?}vAY7w%)fJ2N7{wdVM{!UOtxrPG-M|E1f$iCR6^V);RP
z+q_Ce10I1*C6`1*Z$I5~>8RGV%jYZ4UG%oA=<8QH_&GM;jZgoE(z)WTyq<i=WdA+9
z-pRK(oj>-?!X9fGWp2m%iBA|MRQ+YY+L(B-@fEl6>MWcqUm4`&eet-f*=OCu!oT|y
za)i&M$a4SatXF>@$P#f(FHGdx7tL?xOd$cLd*8jC8W-}He_7~*%X%&n>w!sIwZt`|
zBqgyV)hf9t6-Y4{85kMp8W`&u8iW{_SQ%SbnVRSV83qRJC6;a|8glbfGSez?Yxt(w
R_zS3k!PC{xWt~$(69E0ti+2D3

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml b/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
index 3389cdc..dae53bf 100644
--- a/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
+++ b/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
@@ -53,6 +53,15 @@
                     android:orientation="horizontal">
 
 
+                    <ImageButton
+                        android:id="@+id/camera_switch"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="bottom|end"
+                        android:layout_margin="15dp"
+                        android:background="@drawable/video_selector"
+                        app:srcCompat="@drawable/camera_switch" />
+
                     <ImageView
                         android:id="@+id/Record0"
                         android:layout_width="wrap_content"
@@ -71,6 +80,14 @@
                         android:background="@drawable/photo_selector"
                         app:srcCompat="@drawable/ic_capture_camera_normal" />
 
+                    <ImageButton
+                        android:id="@+id/camera_split_view"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="bottom|end"
+                        android:layout_margin="15dp"
+                        android:background="@drawable/photo_selector"
+                        app:srcCompat="@drawable/ic_capture_camera_normal" />
                 </LinearLayout>
 
             </FrameLayout>
diff --git a/camera/MultiCameraApplication/res/layout/botmleftcam.xml b/camera/MultiCameraApplication/res/layout/botmleftcam.xml
index bc24fe1..86d86b3 100644
--- a/camera/MultiCameraApplication/res/layout/botmleftcam.xml
+++ b/camera/MultiCameraApplication/res/layout/botmleftcam.xml
@@ -69,6 +69,15 @@
         android:gravity="bottom|center"
         android:orientation="horizontal">
 
+        <ImageButton
+            android:id="@+id/camera_switch2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_camera_switch" />
+
         <ImageButton
             android:id="@+id/Record2"
             android:layout_width="wrap_content"
@@ -86,6 +95,15 @@
             android:layout_margin="15dp"
             android:background="@drawable/photo_selector"
             app:srcCompat="@drawable/ic_capture_camera_normal" />
+
+        <ImageButton
+            android:id="@+id/camera_split_view2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_wall_moun_camera" />
     </LinearLayout>
 
     <FrameLayout
diff --git a/camera/MultiCameraApplication/res/layout/botmrightcam.xml b/camera/MultiCameraApplication/res/layout/botmrightcam.xml
index a0851ac..bfb7cd6 100644
--- a/camera/MultiCameraApplication/res/layout/botmrightcam.xml
+++ b/camera/MultiCameraApplication/res/layout/botmrightcam.xml
@@ -70,6 +70,15 @@
         android:orientation="horizontal">
 
 
+        <ImageButton
+            android:id="@+id/camera_switch3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_camera_switch" />
+
         <ImageButton
             android:id="@+id/Record3"
             android:layout_width="wrap_content"
@@ -87,6 +96,16 @@
             android:layout_margin="15dp"
             android:background="@drawable/photo_selector"
             app:srcCompat="@drawable/ic_capture_camera_normal" />
+
+        <ImageButton
+            android:id="@+id/camera_split_view3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_wall_moun_camera" />
+
     </LinearLayout>
 
     <FrameLayout
diff --git a/camera/MultiCameraApplication/res/layout/topleftcam.xml b/camera/MultiCameraApplication/res/layout/topleftcam.xml
index 1f77eff..5ea0855 100644
--- a/camera/MultiCameraApplication/res/layout/topleftcam.xml
+++ b/camera/MultiCameraApplication/res/layout/topleftcam.xml
@@ -70,6 +70,15 @@
         android:orientation="horizontal">
 
 
+        <ImageButton
+            android:id="@+id/camera_switch0"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_camera_switch" />
+
         <ImageButton
             android:id="@+id/Record0"
             android:layout_width="wrap_content"
@@ -89,6 +98,14 @@
             android:src="@drawable/ic_capture_camera_normal"
             android:clickable="true"/>
 
+        <ImageButton
+            android:id="@+id/camera_split_view0"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_wall_moun_camera" />
 
     </LinearLayout>
 
diff --git a/camera/MultiCameraApplication/res/layout/toprightcam.xml b/camera/MultiCameraApplication/res/layout/toprightcam.xml
index 6498df8..b0e7262 100644
--- a/camera/MultiCameraApplication/res/layout/toprightcam.xml
+++ b/camera/MultiCameraApplication/res/layout/toprightcam.xml
@@ -68,6 +68,15 @@
         android:gravity="bottom|center"
         android:orientation="horizontal">
 
+        <ImageButton
+            android:id="@+id/camera_switch1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_camera_switch" />
+
         <ImageButton
             android:id="@+id/Record1"
             android:layout_width="wrap_content"
@@ -85,6 +94,16 @@
             android:layout_margin="15dp"
             android:background="@drawable/photo_selector"
             android:src="@drawable/ic_capture_camera_normal" />
+
+        <ImageButton
+            android:id="@+id/camera_split_view1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_wall_moun_camera" />
+
     </LinearLayout>
 
     <FrameLayout
diff --git a/camera/MultiCameraApplication/res/values/strings.xml b/camera/MultiCameraApplication/res/values/strings.xml
index 4a2dfb3..134a612 100644
--- a/camera/MultiCameraApplication/res/values/strings.xml
+++ b/camera/MultiCameraApplication/res/values/strings.xml
@@ -37,7 +37,7 @@
     <string name="pref_video_quality_small" translatable="false">small</string>
 
 
-    <string name="pref_camera_picturesize_default" translatable="false">1280x720</string>
+    <string name="pref_camera_picturesize_default" translatable="false">640x480</string>
 
     <!-- Preference Titles -->
     <string name="Source">Camera Source</string>
-- 
2.17.1

