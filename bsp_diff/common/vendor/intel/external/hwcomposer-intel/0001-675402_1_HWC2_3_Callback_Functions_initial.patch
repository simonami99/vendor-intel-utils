From 624eb5732d71838d84c73cfe8aa1659d5d1460af Mon Sep 17 00:00:00 2001
From: Michele Lim <michele.lim@intel.com>
Date: Sun, 14 Apr 2019 13:51:35 -0700
Subject: [PATCH] HWC2.3 Callback Functions (initial)

Introduce HWC2.3 API to support feature enhancements including High Dynamic Range (HDR).

Change-Id:     I1fa74ceb90b9e05c0ea9119fafafcc155225b91b
Tests:         Tested on Apollo Lake NUC
Tracked-On:    https://jira.devtools.intel.com/browse/OAM-71878
Signed-off-by: Michele Lim <michele.lim@intel.com>
---
 common/core/logicaldisplay.cpp    |   5 ++
 common/core/logicaldisplay.h      |   3 +
 common/core/mosaicdisplay.cpp     |  20 ++++++
 common/core/mosaicdisplay.h       |   4 ++
 common/display/virtualdisplay.cpp |   4 ++
 common/display/virtualdisplay.h   |   4 ++
 os/android/iahwc2.cpp             | 113 ++++++++++++++++++++++++++++++
 os/android/iahwc2.h               |  33 +++++++++
 public/hwcdefs.h                  |   7 ++
 public/nativedisplay.h            |   9 +++
 wsi/drm/drmdisplay.cpp            |  13 ++++
 wsi/drm/drmdisplay.h              |   3 +
 wsi/physicaldisplay.cpp           |   9 +++
 wsi/physicaldisplay.h             |   5 ++
 14 files changed, 232 insertions(+)

diff --git a/common/core/logicaldisplay.cpp b/common/core/logicaldisplay.cpp
index aafb1631f628..23c357cd0880 100644
--- a/common/core/logicaldisplay.cpp
+++ b/common/core/logicaldisplay.cpp
@@ -238,4 +238,9 @@ bool LogicalDisplay::GetDisplayName(uint32_t *size, char *name) {
   return true;
 }
 
+void LogicalDisplay::GetDisplayCapabilities(uint32_t *numCapabilities,
+                                            uint32_t *capabilities) {
+  physical_display_->GetDisplayCapabilities(numCapabilities, capabilities);
+}
+
 }  // namespace hwcomposer
diff --git a/common/core/logicaldisplay.h b/common/core/logicaldisplay.h
index 2c66f425979e..3ac3e01d5f0c 100644
--- a/common/core/logicaldisplay.h
+++ b/common/core/logicaldisplay.h
@@ -105,6 +105,9 @@ class LogicalDisplay : public NativeDisplay {
 
   bool EnableDRMCommit(bool enable) override;
 
+  void GetDisplayCapabilities(uint32_t *numCapabilities,
+                              uint32_t *capabilities) override;
+
   uint32_t GetXTranslation() override {
     return (((physical_display_->Width()) / total_divisions_) * index_);
   }
diff --git a/common/core/mosaicdisplay.cpp b/common/core/mosaicdisplay.cpp
index 2ba5bb1686ab..15a61f6a6e3d 100644
--- a/common/core/mosaicdisplay.cpp
+++ b/common/core/mosaicdisplay.cpp
@@ -608,6 +608,26 @@ bool MosaicDisplay::GetDisplayName(uint32_t *size, char *name) {
   return true;
 }
 
+bool MosaicDisplay::IsBypassClientCTM() const
+{
+  uint32_t size = physical_displays_.size();
+  for (uint32_t i = 0; i < size; i++)  {
+    if (!physical_displays_.at(i)->IsBypassClientCTM()) {
+      return false;
+    }
+  }
+  return true;
+}
+
+void MosaicDisplay::GetDisplayCapabilities(uint32_t *numCapabilities,
+                                           uint32_t *capabilities) {
+  if (IsBypassClientCTM()) {
+        ++*numCapabilities;
+        *capabilities |= static_cast<uint32_t>(HWCDisplayCapability::
+                         kDisplayCapabilitySkipClientColorTransform);
+  }
+}
+
 void MosaicDisplay::SetHDCPState(HWCContentProtection state,
                                  HWCContentType content_type) {
   uint32_t size = physical_displays_.size();
diff --git a/common/core/mosaicdisplay.h b/common/core/mosaicdisplay.h
index 4630e298fa2b..8fe5d8a8f1ca 100644
--- a/common/core/mosaicdisplay.h
+++ b/common/core/mosaicdisplay.h
@@ -100,6 +100,10 @@ class MosaicDisplay : public NativeDisplay {
 
   bool EnableDRMCommit(bool enable) override;
 
+  bool IsBypassClientCTM() const override;
+  void GetDisplayCapabilities(uint32_t *numCapabilities,
+                              uint32_t *capabilities) override;
+
   uint32_t GetXTranslation() override {
     return 0;
   }
diff --git a/common/display/virtualdisplay.cpp b/common/display/virtualdisplay.cpp
index fdd2d3410115..c7a9cbb3857d 100644
--- a/common/display/virtualdisplay.cpp
+++ b/common/display/virtualdisplay.cpp
@@ -492,6 +492,10 @@ bool VirtualDisplay::GetDisplayName(uint32_t *size, char *name) {
   return true;
 }
 
+void VirtualDisplay::GetDisplayCapabilities(uint32_t *numCapabilities,
+                                            uint32_t *capabilities) {
+}
+
 int VirtualDisplay::GetDisplayPipe() {
   return -1;
 }
diff --git a/common/display/virtualdisplay.h b/common/display/virtualdisplay.h
index 0c4f2370825c..546890133044 100644
--- a/common/display/virtualdisplay.h
+++ b/common/display/virtualdisplay.h
@@ -76,6 +76,10 @@ class VirtualDisplay : public NativeDisplay {
 
   bool GetDisplayConfigs(uint32_t *num_configs, uint32_t *configs) override;
   bool GetDisplayName(uint32_t *size, char *name) override;
+
+  void GetDisplayCapabilities(uint32_t *numCapabilities,
+                              uint32_t *capabilities) override;
+
   int GetDisplayPipe() override;
 
   bool SetPowerMode(uint32_t power_mode) override;
diff --git a/os/android/iahwc2.cpp b/os/android/iahwc2.cpp
index 8c0e0700f03e..cce9e64d2f01 100644
--- a/os/android/iahwc2.cpp
+++ b/os/android/iahwc2.cpp
@@ -845,6 +845,72 @@ HWC2::Error IAHWC2::HwcDisplay::ValidateDisplay(uint32_t *num_types,
   return HWC2::Error::None;
 }
 
+HWC2::Error IAHWC2::HwcDisplay::GetDisplayIdentificationData(
+    uint8_t *outPort, uint32_t *outDataSize, uint8_t *outData) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
+HWC2::Error IAHWC2::HwcDisplay::GetDisplayCapabilities(uint32_t *outNumCapabilities,
+                                                       uint32_t *outCapabilities) {
+  supported(__func__);
+
+  if (!outNumCapabilities) {
+    ALOGE("BadParameter");
+    return HWC2::Error::BadParameter;
+  }
+
+  /* Return number of display capabilities only */
+  if (outCapabilities == NULL) {
+    *outNumCapabilities = getNumCapabilities();
+    return HWC2::Error::None;
+  }
+
+  *outCapabilities = 0;
+  *outNumCapabilities = 0;
+
+  /* Record miscellaneous display capabilities */
+  display_->GetDisplayCapabilities(outNumCapabilities, outCapabilities);
+  setNumCapabilities(*outNumCapabilities);
+
+  /* Record doze suspend display capability */
+  int32_t doze = 0;
+  GetDozeSupport(&doze);
+  if (doze == true) {
+    ++*outNumCapabilities;
+    setNumCapabilities(*outNumCapabilities);
+    *outCapabilities |= HWC2_DISPLAY_CAPABILITY_DOZE;
+  }
+
+  if (numCap_ == maxNumCap_) {
+    ALOGI("Maximum number of display capabilities reached");
+  }
+
+  ALOGI("outCapabilities=%d, outNumCapabilities=%d", *outCapabilities, *outNumCapabilities);
+  return HWC2::Error::None;
+}
+
+HWC2::Error IAHWC2::HwcDisplay::GetDisplayedContentSamplingAttributes(
+    int32_t *format, int32_t *dataspace, uint8_t *supported_components) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
+HWC2::Error IAHWC2::HwcDisplay::SetDisplayedContentSamplingEnabled(
+    int32_t enabled, uint8_t component_mask, uint64_t max_frames) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
+HWC2::Error IAHWC2::HwcDisplay::GetDisplayedContentSample(uint64_t max_frames,
+                                                          uint64_t timestamp,
+                                                          uint64_t *frame_count,
+                                                          int32_t *samples_size,
+                                                          uint64_t **samples) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
 HWC2::Error IAHWC2::Hwc2Layer::SetCursorPosition(int32_t /*x*/, int32_t /*y*/) {
   supported(__func__);
   return HWC2::Error::None;
@@ -1003,6 +1069,18 @@ HWC2::Error IAHWC2::Hwc2Layer::SetLayerZOrder(uint32_t order) {
   return HWC2::Error::None;
 }
 
+HWC2::Error IAHWC2::Hwc2Layer::SetLayerColorTransform(const float *matrix) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
+HWC2::Error IAHWC2::Hwc2Layer::SetLayerPerFrameMetadataBlobs(
+    uint32_t numElements, const int32_t *keys, const uint32_t *sizes,
+    const uint8_t *metadata) {
+  unsupported(__func__);
+  return HWC2::Error::None;
+}
+
 // static
 int IAHWC2::HookDevClose(hw_device_t * /*dev*/) {
   unsupported(__func__);
@@ -1148,6 +1226,32 @@ hwc2_function_pointer_t IAHWC2::HookDevGetFunction(struct hwc2_device * /*dev*/,
       return ToHook<HWC2_PFN_VALIDATE_DISPLAY>(
           DisplayHook<decltype(&HwcDisplay::ValidateDisplay),
                       &HwcDisplay::ValidateDisplay, uint32_t *, uint32_t *>);
+    case HWC2::FunctionDescriptor::GetDisplayIdentificationData:
+      return ToHook<HWC2_PFN_GET_DISPLAY_IDENTIFICATION_DATA>(
+          DisplayHook<decltype(&HwcDisplay::GetDisplayIdentificationData),
+                      &HwcDisplay::GetDisplayIdentificationData, uint8_t *,
+                      uint32_t *, uint8_t *>);
+    case HWC2::FunctionDescriptor::GetDisplayCapabilities:
+      return ToHook<HWC2_PFN_GET_DISPLAY_CAPABILITIES>(
+          DisplayHook<decltype(&HwcDisplay::GetDisplayCapabilities),
+                      &HwcDisplay::GetDisplayCapabilities, uint32_t *,
+                      uint32_t *>);
+    case HWC2::FunctionDescriptor::GetDisplayedContentSamplingAttributes:
+      return ToHook<HWC2_PFN_GET_DISPLAYED_CONTENT_SAMPLING_ATTRIBUTES>(
+          DisplayHook<decltype(
+                          &HwcDisplay::GetDisplayedContentSamplingAttributes),
+                      &HwcDisplay::GetDisplayedContentSamplingAttributes,
+                      int32_t *, int32_t *, uint8_t *>);
+    case HWC2::FunctionDescriptor::SetDisplayedContentSamplingEnabled:
+      return ToHook<HWC2_PFN_SET_DISPLAYED_CONTENT_SAMPLING_ENABLED>(
+          DisplayHook<decltype(&HwcDisplay::SetDisplayedContentSamplingEnabled),
+                      &HwcDisplay::SetDisplayedContentSamplingEnabled, int32_t,
+                      uint8_t, uint64_t>);
+    case HWC2::FunctionDescriptor::GetDisplayedContentSample:
+      return ToHook<HWC2_PFN_GET_DISPLAYED_CONTENT_SAMPLE>(
+          DisplayHook<decltype(&HwcDisplay::GetDisplayedContentSample),
+                      &HwcDisplay::GetDisplayedContentSample, uint64_t,
+                      uint64_t, uint64_t *, int32_t *, uint64_t **>);
 
     // Layer functions
     case HWC2::FunctionDescriptor::SetCursorPosition:
@@ -1206,6 +1310,15 @@ hwc2_function_pointer_t IAHWC2::HookDevGetFunction(struct hwc2_device * /*dev*/,
       return ToHook<HWC2_PFN_SET_LAYER_Z_ORDER>(
           LayerHook<decltype(&Hwc2Layer::SetLayerZOrder),
                     &Hwc2Layer::SetLayerZOrder, uint32_t>);
+    case HWC2::FunctionDescriptor::SetLayerColorTransform:
+      return ToHook<HWC2_PFN_SET_LAYER_COLOR_TRANSFORM>(
+          LayerHook<decltype(&Hwc2Layer::SetLayerColorTransform),
+                    &Hwc2Layer::SetLayerColorTransform, const float *>);
+    case HWC2::FunctionDescriptor::SetLayerPerFrameMetadataBlobs:
+      return ToHook<HWC2_PFN_SET_LAYER_PER_FRAME_METADATA_BLOBS>(
+          LayerHook<decltype(&Hwc2Layer::SetLayerPerFrameMetadataBlobs),
+                    &Hwc2Layer::SetLayerPerFrameMetadataBlobs, uint32_t,
+                    const int32_t *, const uint32_t *, const uint8_t *>);
     case HWC2::FunctionDescriptor::Invalid:
     default:
       return NULL;
diff --git a/os/android/iahwc2.h b/os/android/iahwc2.h
index 82cea0e1316b..cfe62add147b 100644
--- a/os/android/iahwc2.h
+++ b/os/android/iahwc2.h
@@ -140,6 +140,11 @@ class IAHWC2 : public hwc2_device_t {
     HWC2::Error SetLayerTransform(int32_t transform);
     HWC2::Error SetLayerVisibleRegion(hwc_region_t visible);
     HWC2::Error SetLayerZOrder(uint32_t z);
+    HWC2::Error SetLayerColorTransform(const float *matrix);
+    HWC2::Error SetLayerPerFrameMetadataBlobs(uint32_t numElements,
+                                              const int32_t *keys,
+                                              const uint32_t *sizes,
+                                              const uint8_t *metadata);
 
    private:
     // sf_type_ stores the initial type given to us by surfaceflinger,
@@ -159,6 +164,18 @@ class IAHWC2 : public hwc2_device_t {
     HwcDisplay(const HwcDisplay &) = delete;
     HwcDisplay &operator=(const HwcDisplay &) = delete;
 
+    uint32_t numCap_ = 0;
+    uint32_t maxNumCap_ = HWC2_DISPLAY_CAPABILITY_DOZE -
+                          HWC2_DISPLAY_CAPABILITY_INVALID; /* last - first */
+
+    uint32_t getNumCapabilities() {
+      return numCap_;
+    }
+
+    void setNumCapabilities(uint32_t num) {
+      numCap_ = num;
+    }
+
     HWC2::Error Init(hwcomposer::NativeDisplay *display, int display_index,
                      bool disable_explicit_sync, uint32_t scaling_mode);
     HWC2::Error InitVirtualDisplay(hwcomposer::NativeDisplay *display,
@@ -213,6 +230,22 @@ class IAHWC2 : public hwc2_device_t {
     HWC2::Error SetPowerMode(int32_t mode);
     HWC2::Error SetVsyncEnabled(int32_t enabled);
     HWC2::Error ValidateDisplay(uint32_t *num_types, uint32_t *num_requests);
+    HWC2::Error GetDisplayIdentificationData(uint8_t *outPort,
+                                             uint32_t *outDataSize,
+                                             uint8_t *outData);
+    HWC2::Error GetDisplayCapabilities(uint32_t *outNumCapabilities,
+                                       uint32_t *outCapabilities);
+    HWC2::Error GetDisplayedContentSamplingAttributes(
+        int32_t *format, int32_t *dataspace, uint8_t *supported_components);
+    HWC2::Error SetDisplayedContentSamplingEnabled(int32_t enabled,
+                                                   uint8_t component_mask,
+                                                   uint64_t max_frames);
+    HWC2::Error GetDisplayedContentSample(uint64_t max_frames,
+                                          uint64_t timestamp,
+                                          uint64_t *frame_count,
+                                          int32_t *samples_size,
+                                          uint64_t **samples);
+
     Hwc2Layer &get_layer(hwc2_layer_t layer) {
       return layers_.at(layer);
     }
diff --git a/public/hwcdefs.h b/public/hwcdefs.h
index f320f38013bc..758d5a1eabf1 100644
--- a/public/hwcdefs.h
+++ b/public/hwcdefs.h
@@ -141,6 +141,13 @@ enum class HWCScalingRunTimeSetting : int32_t {
   kScalingModeHighQuality = 2  // use high quality scaling mode.
 };
 
+enum class HWCDisplayCapability : uint32_t
+{
+  kDisplayCapabilityInvalid = 0,
+  kDisplayCapabilitySkipClientColorTransform = 1,
+  kDisplayCapabilityDoze = 2
+};
+
 struct EnumClassHash {
   template <typename T>
   std::size_t operator()(T t) const {
diff --git a/public/nativedisplay.h b/public/nativedisplay.h
index bad3251c3ef2..9a715968cb73 100644
--- a/public/nativedisplay.h
+++ b/public/nativedisplay.h
@@ -88,6 +88,10 @@ class NativeDisplay {
 
   virtual bool GetDisplayConfigs(uint32_t *num_configs, uint32_t *configs) = 0;
   virtual bool GetDisplayName(uint32_t *size, char *name) = 0;
+
+  virtual void GetDisplayCapabilities(uint32_t *outNumCapabilities,
+                                      uint32_t *outCapabilities) = 0;
+
   /**
    * API for getting connected display's pipe id.
    * @return "-1" for unconnected display, valid values are 0 ~ 2.
@@ -312,6 +316,11 @@ class NativeDisplay {
     return false;
   }
 
+  /* Returns capability to bypass client-enabled CTM for this display */
+  virtual bool IsBypassClientCTM() const {
+    return false;
+  }
+
   /**
    * Scales layers of display to match it's resolutions in case
    * this display is in cloned mode and resolution doesn't match
diff --git a/wsi/drm/drmdisplay.cpp b/wsi/drm/drmdisplay.cpp
index c542d6301a8d..d474b731e3cb 100644
--- a/wsi/drm/drmdisplay.cpp
+++ b/wsi/drm/drmdisplay.cpp
@@ -463,6 +463,19 @@ bool DrmDisplay::GetDisplayName(uint32_t *size, char *name) {
   return true;
 }
 
+void DrmDisplay::GetDisplayCapabilities(uint32_t *numCapabilities,
+                                        uint32_t *capabilities) {
+  if (ctm_id_prop_) {
+    PhysicalDisplay::GetDisplayCapabilities(numCapabilities, capabilities);
+
+    if (PhysicalDisplay::IsBypassClientCTM() == true)  {
+      ++*numCapabilities;
+      *capabilities |= static_cast<uint32_t>(HWCDisplayCapability::
+                       kDisplayCapabilitySkipClientColorTransform);
+    }
+  }
+}
+
 void DrmDisplay::UpdateDisplayConfig() {
   // update the activeConfig
   SPIN_LOCK(display_lock_);
diff --git a/wsi/drm/drmdisplay.h b/wsi/drm/drmdisplay.h
index 9e6061ab997b..0287487a4fc4 100644
--- a/wsi/drm/drmdisplay.h
+++ b/wsi/drm/drmdisplay.h
@@ -171,6 +171,9 @@ class DrmDisplay : public PhysicalDisplay {
   uint32_t FindPreferedDisplayMode(size_t modes_size);
   uint32_t FindPerformaceDisplayMode(size_t modes_size);
 
+  void GetDisplayCapabilities(uint32_t *numCapabilities,
+                              uint32_t *capabilities);
+
   uint32_t crtc_id_ = 0;
   uint32_t mmWidth_ = 0;
   uint32_t mmHeight_ = 0;
diff --git a/wsi/physicaldisplay.cpp b/wsi/physicaldisplay.cpp
index 679d7caa53d0..08cdd6eb88a4 100644
--- a/wsi/physicaldisplay.cpp
+++ b/wsi/physicaldisplay.cpp
@@ -652,4 +652,13 @@ bool PhysicalDisplay::GetDisplayName(uint32_t *size, char *name) {
   strncpy(name, string.c_str(), *size);
   return true;
 }
+
+bool PhysicalDisplay::IsBypassClientCTM() const {
+  return bypassClientCTM_;
+}
+
+void PhysicalDisplay::GetDisplayCapabilities(uint32_t *numCapabilities,
+                                             uint32_t *capabilities) {
+}
+
 }  // namespace hwcomposer
diff --git a/wsi/physicaldisplay.h b/wsi/physicaldisplay.h
index 471f13ca1d92..01a8fcaae5dd 100644
--- a/wsi/physicaldisplay.h
+++ b/wsi/physicaldisplay.h
@@ -126,6 +126,10 @@ class PhysicalDisplay : public NativeDisplay, public DisplayPlaneHandler {
   bool GetDisplayConfigs(uint32_t *num_configs, uint32_t *configs) override;
   bool GetDisplayName(uint32_t *size, char *name) override;
 
+  bool IsBypassClientCTM() const override;
+  void GetDisplayCapabilities(uint32_t *outNumCapabilities,
+                              uint32_t *outCapabilities) override;
+
   bool EnableDRMCommit(bool enable) override;
 
   /**
@@ -304,6 +308,7 @@ class PhysicalDisplay : public NativeDisplay, public DisplayPlaneHandler {
   std::vector<NativeDisplay *> cloned_displays_;
   std::vector<NativeDisplay *> clones_;
   uint32_t config_ = DEFAULT_CONFIG_ID;
+  bool bypassClientCTM_ = false;
 };
 
 }  // namespace hwcomposer
-- 
2.21.0

